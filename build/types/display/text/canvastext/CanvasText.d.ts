import { Parser } from "../bbcode/Parser";
import { HitAreaManager } from "../hitareamanager/HitAreaManager";
import { Pen } from "../penmanager/Pen";
import { PenManager } from "../penmanager/PenManager";
import { TextField } from "../TextField";
import { WrapMode } from "../WrapText";
export declare class CanvasText {
    hitAreaManager: HitAreaManager;
    private _parent;
    private _context;
    private _canvas;
    private _parser;
    private defaultStyle;
    private autoRound;
    private penPool;
    private _penManager;
    private _tmpPenManager;
    private getTextWidth;
    constructor(config: any);
    updatePenManager(text: string, wrapMode: WrapMode, wrapWidth: number, penManager?: PenManager): PenManager;
    draw(x: number, y: number, width: number, height: number, textScrollX?: number, textScrollY?: number): Promise<CanvasText>;
    destroy(): void;
    getPlainText(text: string, start: number, end: number): string;
    getPenManager(text: any, retPenManager: any): any;
    getText(text: string, start: number, end: number, wrap?: boolean): string;
    clonePenManager(ret: PenManager, src: PenManager): PenManager;
    getLastPen(penManager?: PenManager): Pen;
    setInteractive(): void;
    disableInteractive(): void;
    clear(): void;
    protected pointerDownHandler(pointer: Phaser.Input.Pointer, localX: number, localY: number, event: any): void;
    protected pointerUpHandler(pointer: Phaser.Input.Pointer, localX: number, localY: number, event: any): void;
    protected fireEvent(eventName: string, pointer: Phaser.Input.Pointer, localX: number, localY: number): void;
    get imageManager(): import("../imagemanager/ImageManager").ImageManager;
    get startXOffset(): number;
    get startYOffset(): any;
    get lines(): import("../penmanager/Line").Line[];
    get context(): CanvasRenderingContext2D;
    get canvas(): HTMLCanvasElement;
    get penManager(): PenManager;
    get textWidth(): number;
    get textHeight(): number;
    get parent(): TextField;
    get parser(): Parser;
}
