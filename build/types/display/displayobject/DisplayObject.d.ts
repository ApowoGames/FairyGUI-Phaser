export declare class DisplayObject extends Phaser.GameObjects.GameObject {
    x: number;
    y: number;
    width: number;
    height: number;
    flipX: boolean;
    flipY: boolean;
    originX: number;
    originY: number;
    scrollFactorX: number;
    scrollFactorY: number;
    pipeline: Phaser.Renderer.WebGL.WebGLPipeline;
    defaultPipeline: Phaser.Renderer.WebGL.WebGLPipeline;
    pipelineData: any;
    renderer: Phaser.Renderer.Canvas.CanvasRenderer | Phaser.Renderer.WebGL.WebGLRenderer;
    mask: Phaser.Display.Masks.BitmapMask | Phaser.Display.Masks.GeometryMask;
    autoRound: boolean;
    tintTopLeft: number;
    tintTopRight: number;
    tintBottomLeft: number;
    tintBottomRight: number;
    tintFill: boolean;
    protected _alpha: number;
    protected _alphaTL: number;
    protected _alphaTR: number;
    protected _alphaBL: number;
    protected _alphaBR: number;
    protected _visible: boolean;
    protected _scaleX: number;
    protected _scaleY: number;
    protected _rotation: number;
    protected _displayOriginX: number;
    protected _displayOriginY: number;
    protected _originComponent: boolean;
    protected _blendMode: Phaser.BlendModes;
    constructor(scene: Phaser.Scene, type?: string);
    setOrigin(x?: number, y?: number): this;
    updateDisplayOrigin(): this;
    setVisible(val: boolean): this;
    setMask(mask: Phaser.Display.Masks.GeometryMask | Phaser.Display.Masks.BitmapMask): void;
    clearMask(destroyMask?: boolean): this;
    setScale(): void;
    setSize(w: number, h: number): this;
    setPosition(x?: number, y?: number): this;
    setAlpha(topLeft: number, topRight: number, bottomLeft: number, bottomRight: number): this;
    getLocalTransformMatrix(tempMatrix: Phaser.GameObjects.Components.TransformMatrix): Phaser.GameObjects.Components.TransformMatrix;
    getWorldTransformMatrix(tempMatrix?: Phaser.GameObjects.Components.TransformMatrix, parentMatrix?: Phaser.GameObjects.Components.TransformMatrix): Phaser.GameObjects.Components.TransformMatrix;
    getLocalPoint(x: number, y: number, point: Phaser.Math.Vector2, camera: Phaser.Cameras.Scene2D.Camera): Phaser.Math.Vector2;
    getParentRotation(): number;
    initPipeline(pipeline?: Phaser.Renderer.WebGL.WebGLPipeline | string): boolean;
    setPipeline(pipeline: Phaser.Renderer.WebGL.WebGLPipeline | string, pipelineData: any, copyData?: boolean): this;
    setPipelineData(key: string, value?: any): this;
    setBlendMode(val: Phaser.BlendModes): void;
    setScrollFactor(x: number, y: number): this;
    renderCanvas(renderer: Phaser.Renderer.Canvas.CanvasRenderer, src: Phaser.GameObjects.GameObject, camera: Phaser.Cameras.Scene2D.Camera, parentMatrix: Phaser.GameObjects.Components.TransformMatrix): void;
    renderWebGL(renderer: Phaser.Renderer.WebGL.WebGLRenderer, src: Phaser.GameObjects.GameObject, camera: Phaser.Cameras.Scene2D.Camera, parentMatrix: Phaser.GameObjects.Components.TransformMatrix): void;
    protected preDestroy(): void;
    set scale(val: number);
    get scale(): number;
    get scaleX(): number;
    set scaleX(val: number);
    get scaleY(): number;
    set scaleY(val: number);
    get rotation(): number;
    set rotation(val: number);
    get angle(): number;
    set angle(val: number);
    get displayOriginX(): number;
    set displayOriginX(val: number);
    get displayOriginY(): number;
    set displayOriginY(val: number);
    get displayWidth(): number;
    set displayWidth(val: number);
    get displayHeight(): number;
    set displayHeight(val: number);
    get alpha(): number;
    set alpha(val: number);
    get alphaTL(): number;
    get alphaTR(): number;
    get alphaBL(): number;
    get alphaBR(): number;
    get visible(): boolean;
    set visible(val: boolean);
    get blendMode(): Phaser.BlendModes;
    set blendMode(val: Phaser.BlendModes);
}
