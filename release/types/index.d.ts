// Generated by dts-bundle v0.7.3

declare module 'fairygui-phaser' {
    export * from "fairygui-phaser/GRoot";
    export * from "fairygui-phaser/GObject";
    export * from "fairygui-phaser/GComponent";
    export * from "fairygui-phaser/Window";
    export * from "fairygui-phaser/UIPackage";
    export * from "fairygui-phaser/UIObjectFactory";
    export * from "fairygui-phaser/UIConfig";
    export * from "fairygui-phaser/TranslationHelper";
    export * from "fairygui-phaser/Transition";
    export * from "fairygui-phaser/ScrollPane";
    export * from "fairygui-phaser/Relations";
    export * from "fairygui-phaser/RelationItem";
    export * from "fairygui-phaser/PopupMenu";
    export * from "fairygui-phaser/PackageItem";
    export * from "fairygui-phaser/Margin";
    export * from "fairygui-phaser/IUISource";
    export * from "fairygui-phaser/GTreeNode";
    export * from "fairygui-phaser/GTree";
    export * from "fairygui-phaser/GTextInput";
    export * from "fairygui-phaser/GTextField";
    export * from "fairygui-phaser/GSlider";
    export * from "fairygui-phaser/GScrollBar";
    export * from "fairygui-phaser/GRichTextField";
    export * from "fairygui-phaser/GProgressBar";
    export * from "fairygui-phaser/GObjectPool";
    export * from "fairygui-phaser/GMovieClip";
    export * from "fairygui-phaser/GLoader";
    export * from "fairygui-phaser/GList";
    export * from "fairygui-phaser/GLabel";
    export * from "fairygui-phaser/GImage";
    export * from "fairygui-phaser/GGroup";
    export * from "fairygui-phaser/GGraph";
    export * from "fairygui-phaser/GComboBox";
    export * from "fairygui-phaser/GButton";
    export * from "fairygui-phaser/GBasicTextField";
    export * from "fairygui-phaser/FieldTypes";
    export * from "fairygui-phaser/Events";
    export * from "fairygui-phaser/DragDropManager";
    export * from "fairygui-phaser/Controller";
    export * from "fairygui-phaser/AsyncOperation";
    export * from "fairygui-phaser/AssetProxy";
    export * from "fairygui-phaser/action";
    export * from "fairygui-phaser/display";
    export * from "fairygui-phaser/event";
    export * from "fairygui-phaser/gears";
    export * from "fairygui-phaser/tween";
    export * from "fairygui-phaser/utils";
}

declare module 'fairygui-phaser/GRoot' {
    import { GObject } from 'fairygui-phaser/GObject';
    import { UIStageOptions } from 'fairygui-phaser/display/UIStage';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class GRootMouseStatus {
            touchDown: boolean;
            mouseX: number;
            mouseY: number;
    }
    export enum UISceneDisplay {
            LAYER_ROOT = 0,
            LAYER_UI = 1,
            LAYER_DIALOG = 2,
            LAYER_TOOLTIPS = 3,
            LAYER_MASK = 4
    }
    /**
        * gui根对象（逻辑对象）
        */
    export class GRoot extends GComponent {
            constructor();
            get displayObject(): Phaser.GameObjects.Container;
            static get inst(): GRoot;
            /**
             * the current mouse/pointer data
             */
            static get globalMouseStatus(): GRootMouseStatus;
            get focus(): GObject;
            set focus(value: GObject);
            /**
                * 游戏/编辑器启动ui入口,注入uiScene
                * @param scene
                * @param stageOptions
                */
            attachTo(scene: Phaser.Scene, stageOptions?: UIStageOptions): void;
            addListen(): void;
            removeListen(): void;
            addTimeEvent(timeEvent: Phaser.Time.TimerEvent): Phaser.Time.TimerEvent;
            removeTimeEvent(timeEvent: Phaser.Time.TimerEvent): void;
            playOneShotSound(url: string, volumeScale?: number): void;
            createDisplayObject(): void;
    }
}

declare module 'fairygui-phaser/GObject' {
    import { Controller } from 'fairygui-phaser/Controller';
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GRoot } from 'fairygui-phaser/GRoot';
    import { GTreeNode } from 'fairygui-phaser/GTreeNode';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    import { GGroup } from 'fairygui-phaser/GGroup';
    import { Relations } from 'fairygui-phaser/Relations';
    import { PackageItem } from 'fairygui-phaser/PackageItem';
    import { GComponent } from 'fairygui-phaser/GComponent';
    import { GTree } from 'fairygui-phaser/GTree';
    export class DisplayStyle {
            static EMPTY: DisplayStyle;
            /**水平缩放 */
            scaleX: number;
            /**垂直缩放 */
            scaleY: number;
            /**水平倾斜角度 */
            skewX: number;
            /**垂直倾斜角度 */
            skewY: number;
            /**X轴心点 */
            pivotX: number;
            /**Y轴心点 */
            pivotY: number;
            /**旋转角度 */
            rotation: number;
            /**透明度 */
            alpha: number;
            /**滚动区域 */
            scrollRect: Phaser.Geom.Rectangle;
            /**视口 */
            viewport: Phaser.Geom.Rectangle;
            /**点击区域 */
            hitArea: any;
    }
    export class GObject {
            data: Object;
            packageItem: PackageItem;
            static draggingObject: GObject;
            protected _displayObject: Phaser.GameObjects.Container;
            protected _yOffset: number;
            protected _scene: Phaser.Scene;
            minWidth: number;
            minHeight: number;
            maxWidth: number;
            maxHeight: number;
            sourceWidth: number;
            sourceHeight: number;
            initWidth: number;
            initHeight: number;
            _parent: GComponent;
            _width: number;
            _height: number;
            _rawWidth: number;
            _rawHeight: number;
            _id: string;
            _name: string;
            _underConstruct: boolean;
            _gearLocked?: boolean;
            _sizePercentInGroup: number;
            _treeNode?: GTreeNode;
            constructor();
            get dpr(): number;
            set dpr(value: number);
            get id(): string;
            set id(value: string);
            get name(): string;
            set name(value: string);
            get x(): number;
            set x(value: number);
            get y(): number;
            set y(value: number);
            get scene(): Phaser.Scene;
            set scene(value: Phaser.Scene);
            get timeEvent(): Phaser.Time.TimerEvent;
            set timeEvent(value: Phaser.Time.TimerEvent);
            setXY(xv: number, yv: number): void;
            get xMin(): number;
            set xMin(value: number);
            get yMin(): number;
            set yMin(value: number);
            get pixelSnapping(): boolean;
            set pixelSnapping(value: boolean);
            center(restraint?: boolean): void;
            get width(): number;
            set width(value: number);
            get height(): number;
            set height(value: number);
            setSize(wv: number, hv: number, ignorePivot?: boolean): void;
            ensureSizeCorrect(): void;
            makeFullScreen(): void;
            get actualWidth(): number;
            get actualHeight(): number;
            get scaleX(): number;
            set scaleX(value: number);
            get scaleY(): number;
            set scaleY(value: number);
            setScale(sx: number, sy: number): void;
            get skewX(): number;
            set skewX(value: number);
            get skewY(): number;
            set skewY(value: number);
            setSkew(sx: number, sy: number): void;
            protected _adjustTransform(): Phaser.GameObjects.Components.TransformMatrix;
            get pivotX(): number;
            set pivotX(value: number);
            get pivotY(): number;
            set pivotY(value: number);
            setPivot(xv: number, yv?: number, asAnchor?: boolean): void;
            get pivotAsAnchor(): boolean;
            protected internalSetPivot(xv: number, yv: number, asAnchor: boolean): void;
            get touchable(): boolean;
            set touchable(value: boolean);
            get grayed(): boolean;
            set grayed(value: boolean);
            get enabled(): boolean;
            set enabled(value: boolean);
            get rotation(): number;
            set rotation(value: number);
            get normalizeRotation(): number;
            get alpha(): number;
            set alpha(value: number);
            get visible(): boolean;
            set visible(value: boolean);
            get internalVisible(): boolean;
            get internalVisible2(): boolean;
            get internalVisible3(): boolean;
            get sortingOrder(): number;
            set sortingOrder(value: number);
            get focused(): boolean;
            requestFocus(): void;
            get tooltips(): string;
            set tooltips(value: string);
            get blendMode(): Phaser.BlendModes | string;
            set blendMode(value: Phaser.BlendModes | string);
            get filters(): any[];
            set filters(value: any[]);
            get inContainer(): boolean;
            get onStage(): boolean;
            get resourceURL(): string;
            set group(value: GGroup);
            get group(): GGroup;
            getGear(index: number): GearBase;
            protected updateGear(index: number): void;
            checkGearController(index: number, c: Controller): boolean;
            updateGearFromRelations(index: number, dx: number, dy: number): void;
            addDisplayLock(): number;
            releaseDisplayLock(token: number): void;
            get relations(): Relations;
            addRelation(target: GObject, relationType: number, usePercent?: boolean): void;
            removeRelation(target: GObject, relationType?: number): void;
            get displayObject(): Phaser.GameObjects.GameObject;
            get parent(): GComponent;
            set parent(val: GComponent);
            removeFromParent(): void;
            get root(): GRoot;
            get asCom(): GComponent;
            get asTree(): GTree;
            get asGroup(): GGroup;
            get text(): string;
            set text(value: string);
            get icon(): string;
            set icon(value: string);
            get treeNode(): GTreeNode;
            get isDisposed(): boolean;
            get scrollRect(): Phaser.Geom.Rectangle;
            set scrollRect(val: Phaser.Geom.Rectangle);
            /**
                * <p>可以设置一个Rectangle区域作为点击区域，或者设置一个<code>HitArea</code>实例作为点击区域，HitArea内可以设置可点击和不可点击区域。</p>
                * <p>如果不设置hitArea，则根据宽高形成的区域进行碰撞。</p>
             */
            get hitArea(): any;
            set hitArea(value: any);
            dispose(): void;
            onClick(listener: Function): void;
            offClick(listener: Function, once?: boolean): void;
            hasClickListener(): boolean;
            on(type: string, listener: Function): void;
            off(type: string, listener: Function, once?: boolean): void;
            get draggable(): boolean;
            set draggable(value: boolean);
            get dragBounds(): Phaser.Geom.Rectangle;
            set dragBounds(value: Phaser.Geom.Rectangle);
            startDrag(touchID?: number): void;
            stopDrag(): void;
            get dragging(): boolean;
            localToGlobal(ax?: number, ay?: number, result?: Phaser.Geom.Point): Phaser.Geom.Point;
            _localToGlobal(point: Phaser.Geom.Point, createNewPoint?: boolean): Phaser.Geom.Point;
            globalToLocal(ax?: number, ay?: number, result?: Phaser.Geom.Point): Phaser.Geom.Point;
            _globalToLocal(point: Phaser.Geom.Point, createNewPoint?: boolean): Phaser.Geom.Point;
            /**
        * 将本地坐标系坐标转转换到父容器坐标系。
        * @param point 本地坐标点。
        * @return  转换后的点。
        */
            toParentPoint(point: Phaser.Geom.Point): Phaser.Geom.Point;
            /**
                * 将父容器坐标系坐标转换到本地坐标系。
                * @param point 父容器坐标点。
                * @return  转换后的点。
                */
            fromParentPoint(point: Phaser.Geom.Point): Phaser.Geom.Point;
            /**
        * 对指定的点应用当前矩阵的逆转化并返回此点。
        * @param	out 待转化的点 Point 对象。
        * @return	返回out
        */
            invertTransformPoint(out: Phaser.Geom.Point): Phaser.Geom.Point;
            localToGlobalRect(ax?: number, ay?: number, aw?: number, ah?: number, result?: Phaser.Geom.Rectangle): Phaser.Geom.Rectangle;
            globalToLocalRect(ax?: number, ay?: number, aw?: number, ah?: number, result?: Phaser.Geom.Rectangle): Phaser.Geom.Rectangle;
            handleControllerChanged(c: Controller): void;
            createDisplayObject(): void;
            setDisplayObject(val: any): void;
            protected handleXYChanged(): void;
            protected handleSizeChanged(): void;
            protected handleScaleChanged(): void;
            protected handleGrayedChanged(): void;
            protected handleAlphaChanged(): void;
            handleVisibleChanged(): void;
            getProp(index: number): any;
            setProp(index: number, value: any): void;
            constructFromResource(): void;
            setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
            setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
            static cast(sprite: Phaser.GameObjects.Container): GObject;
    }
    export const BlendMode: {
            2: Phaser.BlendModes;
            3: Phaser.BlendModes;
            4: Phaser.BlendModes;
    };
}

declare module 'fairygui-phaser/GComponent' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GGroup } from 'fairygui-phaser/GGroup';
    import { ScrollPane } from 'fairygui-phaser/ScrollPane';
    import { Transition } from 'fairygui-phaser/Transition';
    import { Margin } from 'fairygui-phaser/Margin';
    import { Controller } from 'fairygui-phaser/Controller';
    import { Graphics } from 'fairygui-phaser/display/Graphics';
    import { GObject } from 'fairygui-phaser/GObject';
    export class GComponent extends GObject {
        protected _margin: Margin;
        protected _trackBounds: boolean;
        protected _boundsChanged: boolean;
        protected _childrenRenderOrder: number;
        protected _apexIndex: number;
        _buildingDisplayList: boolean;
        _children: GObject[];
        _controllers: Controller[];
        _transitions: Transition[];
        _container: Phaser.GameObjects.Container;
        _scrollPane?: ScrollPane;
        _alignOffset: Phaser.Geom.Point;
        constructor();
        createDisplayObject(): void;
        dispose(): void;
        get displayListContainer(): Phaser.GameObjects.Container;
        add(child: GObject): GObject;
        addChildAt(child: GObject, index: number): GObject;
        removeChild(child: GObject, dispose?: boolean): GObject;
        removeChildAt(index: number, dispose?: boolean): GObject;
        removeChildren(beginIndex?: number, endIndex?: number, dispose?: boolean): void;
        getChildAt(index: number): GObject;
        getChild(name: string): GObject;
        getChildByPath(path: String): GObject;
        getVisibleChild(name: string): GObject;
        getChildInGroup(name: string, group: GGroup): GObject;
        getChildById(id: string): GObject;
        getChildIndex(child: GObject): number;
        setChildIndex(child: GObject, index: number): void;
        setChildIndexBefore(child: GObject, index: number): number;
        swapChildren(child1: GObject, child2: GObject): void;
        swapChildrenAt(index1: number, index2: number): void;
        get numChildren(): number;
        isAncestorOf(child: GObject): boolean;
        addController(controller: Controller): void;
        getControllerAt(index: number): Controller;
        getController(name: string): Controller;
        removeController(c: Controller): void;
        get controllers(): Controller[];
        childStateChanged(child: GObject): void;
        applyController(c: Controller): void;
        applyAllControllers(): void;
        adjustRadioGroupDepth(obj: GObject, c: Controller): void;
        getTransitionAt(index: number): Transition;
        getTransition(transName: string): Transition;
        isChildInView(child: GObject): boolean;
        getFirstChildInView(): number;
        get scrollPane(): ScrollPane;
        get opaque(): boolean;
        set opaque(value: boolean);
        get margin(): Margin;
        set margin(value: Margin);
        get childrenRenderOrder(): number;
        set childrenRenderOrder(value: number);
        get apexIndex(): number;
        set apexIndex(value: number);
        get mask(): Graphics;
        set mask(value: Graphics);
        setMask(value: Graphics, reversed: boolean): void;
        get baseUserData(): string;
        protected updateHitArea(): void;
        protected updateMask(): void;
        protected setupScroll(buffer: ByteBuffer): void;
        protected setupOverflow(overflow: number): void;
        protected handleSizeChanged(): void;
        protected handleGrayedChanged(): void;
        handleControllerChanged(c: Controller): void;
        setBoundsChangedFlag(): void;
        ensureBoundsCorrect(): void;
        protected updateBounds(): void;
        setBounds(ax: number, ay: number, aw: number, ah: number): void;
        get viewWidth(): number;
        set viewWidth(value: number);
        get viewHeight(): number;
        set viewHeight(value: number);
        getSnappingPosition(xValue: number, yValue: number, result?: Phaser.Geom.Point): Phaser.Geom.Point;
        /**
          * dir正数表示右移或者下移，负数表示左移或者上移
          */
        getSnappingPositionWithDir(xValue: number, yValue: number, xDir: number, yDir: number, result?: Phaser.Geom.Point): Phaser.Geom.Point;
        childSortingOrderChanged(child: GObject, oldValue: number, newValue: number): void;
        constructFromResource(): void;
        constructFromResource2(objectPool: GObject[], poolIndex: number): void;
        protected constructExtension(buffer: ByteBuffer): void;
        protected onConstruct(): void;
        protected constructFromXML(xml: Object): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/Window' {
    import { GRoot } from 'fairygui-phaser/GRoot';
    import { IUISource } from 'fairygui-phaser/IUISource';
    import { GObject } from 'fairygui-phaser/GObject';
    import "tooqingphaser";
    import { GComponent } from "fairygui-phaser/GComponent";
    export class Window extends GComponent {
        protected _requestingCmd: number;
        bringToFontOnClick: boolean;
        constructor();
        addUISource(source: IUISource): void;
        set contentPane(val: GComponent);
        get contentPane(): GComponent;
        get frame(): GComponent;
        get closeButton(): GObject;
        set closeButton(value: GObject);
        get dragArea(): GObject;
        set dragArea(value: GObject);
        get contentArea(): GObject;
        set contentArea(value: GObject);
        show(): void;
        showOn(root: GRoot): void;
        hide(): void;
        hideImmediately(): void;
        centerOn(r: GRoot, restraint?: boolean): void;
        toggleStatus(): void;
        get isShowing(): boolean;
        get isTop(): boolean;
        get modal(): boolean;
        set modal(val: boolean);
        bringToFront(): void;
        showModalWait(requestingCmd?: number): void;
        protected layoutModalWaitPane(): void;
        closeModalWait(requestingCmd?: number): boolean;
        get modalWaiting(): boolean;
        init(): void;
        protected onInit(): void;
        protected onShown(): void;
        protected onHide(): void;
        protected doShowAnimation(): void;
        protected doHideAnimation(): void;
        dispose(): void;
        protected closeEventHandler(): void;
    }
}

declare module 'fairygui-phaser/UIPackage' {
    import { GObject } from 'fairygui-phaser/GObject';
    import { PackageItem } from 'fairygui-phaser/PackageItem';
    export class UIPackage {
        _branchIndex: number;
        static _constructing: number;
        constructor();
        static get branch(): string;
        static set branch(value: string);
        static getVar(key: string): string;
        static setVar(key: string, value: string): void;
        static getById(id: string): UIPackage;
        static getByName(name: string): UIPackage;
        static addPackage(resKey: string, descData?: ArrayBuffer): UIPackage;
        static loadPackage(resKey: string, onProgress?: (event: ProgressEvent) => void): Promise<UIPackage>;
        static removePackage(packageIdOrName: string): void;
        static createObject(pkgName: string, resName: string, userClass?: new () => GObject): GObject;
        static createObjectFromURL(url: string, userClass?: new () => GObject): GObject;
        static getItemURL(pkgName: string, resName: string): string;
        static getItemByURL(url: string): PackageItem;
        static getItemAssetByURL(url: string): Object;
        static normalizeURL(url: string): string;
        static setStringsSource(source: string): void;
        loadAllAssets(): void;
        unloadAssets(): void;
        dispose(): void;
        get id(): string;
        get name(): string;
        get customId(): string;
        set customId(value: string);
        createObject(resName: string, userClass?: new () => GObject): GObject;
        internalCreateObject(item: PackageItem, userClass?: new () => GObject): GObject;
        getItemById(itemId: string): PackageItem;
        getItemByName(resName: string): PackageItem;
        getItemAssetByName(resName: string): Object;
        getItemAsset(item: PackageItem): Object;
        getItemAssetAsync(item: PackageItem, onComplete?: (err: any, item: PackageItem) => void): void;
    }
}

declare module 'fairygui-phaser/UIObjectFactory' {
    import { GObject } from 'fairygui-phaser/GObject';
    import { PackageItem } from 'fairygui-phaser/PackageItem';
    import { GLoader } from 'fairygui-phaser/GLoader';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class UIObjectFactory {
        static extensions: {
            [index: string]: new () => GComponent;
        };
        static loaderType: new () => GLoader;
        constructor();
        static setExtension(url: string, type: new () => GComponent): void;
        static setPackageItemExtension(url: string, type: new () => GComponent): void;
        static setLoaderExtension(type: new () => GLoader): void;
        static resolvePackageItemExtension(pi: PackageItem): void;
        static newObject(type: number | PackageItem, userClass?: new () => GObject): GObject;
    }
}

declare module 'fairygui-phaser/UIConfig' {
    export class UIConfig {
            constructor();
            static defaultFont: string;
            static windowModalWaiting: string;
            static globalModalWaiting: string;
            static modalLayerColor: string;
            static buttonSound: string;
            static buttonSoundVolumeScale: number;
            static horizontalScrollBar: string;
            static verticalScrollBar: string;
            static defaultScrollStep: number;
            static defaultScrollDecelerationRate: number;
            static defaultScrollBarDisplay: number;
            static defaultScrollTouchEffect: boolean;
            static defaultScrollBounceEffect: boolean;
            /**
                 * 当滚动容器设置为“贴近ITEM”时，判定贴近到哪一个ITEM的滚动距离阀值。
                 */
            static defaultScrollSnappingThreshold: number;
            /**
                 * 当滚动容器设置为“页面模式”时，判定翻到哪一页的滚动距离阀值。
                 */
            static defaultScrollPagingThreshold: number;
            static popupMenu: string;
            static popupMenu_seperator: string;
            static loaderErrorSign: string;
            static tooltipsWin: string;
            static defaultComboBoxVisibleItemCount: number;
            static touchScrollSensitivity: number;
            static touchDragSensitivity: number;
            static clickDragSensitivity: number;
            static bringWindowToFrontOnClick: boolean;
            static frameTimeForAsyncUIConstruction: number;
            static textureLinearSampling: boolean;
            static packageFileExtension: string;
    }
}

declare module 'fairygui-phaser/TranslationHelper' {
    import { PackageItem } from 'fairygui-phaser/PackageItem';
    export class TranslationHelper {
        static strings: {
            [index: string]: {
                [index: string]: string;
            };
        };
        static loadFromXML(source: string): void;
        static translateComponent(item: PackageItem): void;
    }
}

declare module 'fairygui-phaser/Transition' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class Transition {
        name: string;
        constructor(owner: GComponent);
        play(onComplete?: () => void, times?: number, delay?: number, startTime?: number, endTime?: number): void;
        playReverse(onComplete?: () => void, times?: number, delay?: number, startTime?: number, endTime?: number): void;
        changePlayTimes(value: number): void;
        setAutoPlay(value: boolean, times?: number, delay?: number): void;
        stop(setToComplete?: boolean, processCallback?: boolean): void;
        setPaused(paused: boolean): void;
        dispose(): void;
        get playing(): boolean;
        setValue(label: string, ...args: any[]): void;
        setHook(label: string, callback: (label?: string) => void): void;
        clearHooks(): void;
        setTarget(label: string, newTarget: GObject): void;
        setDuration(label: string, value: number): void;
        getLabelTime(label: string): number;
        get timeScale(): number;
        set timeScale(value: number);
        updateFromRelations(targetId: string, dx: number, dy: number): void;
        onOwnerAddedToStage(): void;
        onOwnerRemovedFromStage(): void;
        setup(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-phaser/ScrollPane' {
    import { GObject } from 'fairygui-phaser/GObject';
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { Controller } from 'fairygui-phaser/Controller';
    import { GScrollBar } from 'fairygui-phaser/GScrollBar';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class ScrollPane {
        _displayInDemand?: boolean;
        _loop: number;
        static draggingPane: ScrollPane;
        constructor(owner: GComponent);
        setup(buffer: ByteBuffer): void;
        dispose(): void;
        get owner(): GComponent;
        get hzScrollBar(): GScrollBar;
        get vtScrollBar(): GScrollBar;
        get header(): GComponent;
        get footer(): GComponent;
        get bouncebackEffect(): boolean;
        set bouncebackEffect(sc: boolean);
        get touchEffect(): boolean;
        set touchEffect(sc: boolean);
        set scrollStep(val: number);
        get scrollStep(): number;
        get snapToItem(): boolean;
        set snapToItem(value: boolean);
        get mouseWheelEnabled(): boolean;
        set mouseWheelEnabled(value: boolean);
        get decelerationRate(): number;
        set decelerationRate(value: number);
        get isDragged(): boolean;
        get percX(): number;
        set percX(value: number);
        setPercX(value: number, ani?: boolean): void;
        get percY(): number;
        set percY(value: number);
        setPercY(value: number, ani?: boolean): void;
        get posX(): number;
        set posX(value: number);
        setPosX(value: number, ani?: boolean): void;
        get posY(): number;
        set posY(value: number);
        setPosY(value: number, ani?: boolean): void;
        get contentWidth(): number;
        get contentHeight(): number;
        get viewWidth(): number;
        set viewWidth(value: number);
        get viewHeight(): number;
        set viewHeight(value: number);
        get currentPageX(): number;
        set currentPageX(value: number);
        get currentPageY(): number;
        set currentPageY(value: number);
        setCurrentPageX(value: number, ani?: boolean): void;
        setCurrentPageY(value: number, ani?: boolean): void;
        get isBottomMost(): boolean;
        get isRightMost(): boolean;
        get pageController(): Controller;
        set pageController(value: Controller);
        get scrollingPosX(): number;
        get scrollingPosY(): number;
        scrollTop(ani?: boolean): void;
        scrollBottom(ani?: boolean): void;
        scrollUp(ratio?: number, ani?: boolean): void;
        scrollDown(ratio?: number, ani?: boolean): void;
        scrollLeft(ratio?: number, ani?: boolean): void;
        scrollRight(ratio?: number, ani?: boolean): void;
        scrollToView(target: Phaser.Geom.Rectangle | GObject, ani?: boolean, setFirst?: boolean): void;
        isChildInView(obj: GObject): boolean;
        cancelDragging(): void;
        lockHeader(size: number): void;
        lockFooter(size: number): void;
        onOwnerSizeChanged(): void;
        handleControllerChanged(c: Controller): void;
        adjustMaskContainer(): void;
        setSize(aWidth: number, aHeight: number): void;
        setContentSize(aWidth: number, aHeight: number): void;
        changeContentSizeOnScrolling(deltaWidth: number, deltaHeight: number, deltaPosX: number, deltaPosY: number): void;
        updateScrollBarVisible(): void;
    }
}

declare module 'fairygui-phaser/Relations' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    export class Relations {
        handling: GObject;
        sizeDirty?: boolean;
        constructor(owner: GObject);
        add(target: GObject, relationType: number, usePercent?: boolean): void;
        remove(target: GObject, relationType?: number): void;
        contains(target: GObject): boolean;
        clearFor(target: GObject): void;
        clearAll(): void;
        copyFrom(source: Relations): void;
        dispose(): void;
        onOwnerSizeChanged(dWidth: number, dHeight: number, applyPivot: boolean): void;
        ensureRelationsSizeCorrect(): void;
        get empty(): boolean;
        setup(buffer: ByteBuffer, parentToChild: boolean): void;
    }
}

declare module 'fairygui-phaser/RelationItem' {
    import { GObject } from 'fairygui-phaser/GObject';
    export class RelationItem {
        constructor(owner: GObject);
        get owner(): GObject;
        set target(value: GObject);
        get target(): GObject;
        add(relationType: number, usePercent: boolean): void;
        internalAdd(relationType: number, usePercent: boolean): void;
        remove(relationType: number): void;
        copyFrom(source: RelationItem): void;
        dispose(): void;
        get isEmpty(): boolean;
        applyOnSelfResized(dWidth: number, dHeight: number, applyPivot: boolean): void;
    }
}

declare module 'fairygui-phaser/PopupMenu' {
    import { PopupDirection } from 'fairygui-phaser/FieldTypes';
    import { GButton } from 'fairygui-phaser/GButton';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GList } from 'fairygui-phaser/GList';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class PopupMenu {
        protected _contentPane: GComponent;
        protected _list: GList;
        constructor(resourceURL?: string);
        dispose(): void;
        addItem(caption: string, handler?: (item?: GObject, evt?: Event) => void): GButton;
        addItemAt(caption: string, index: number, handler?: (item?: GObject, evt?: Event) => void): GButton;
        addSeperator(): void;
        getItemName(index: number): string;
        setItemText(name: string, caption: string): void;
        setItemVisible(name: string, visible: boolean): void;
        setItemGrayed(name: string, grayed: boolean): void;
        setItemCheckable(name: string, checkable: boolean): void;
        setItemChecked(name: string, checked: boolean): void;
        isItemChecked(name: string): boolean;
        removeItem(name: string): boolean;
        clearItems(): void;
        get itemCount(): number;
        get contentPane(): GComponent;
        get list(): GList;
        show(target?: GObject, dir?: PopupDirection | boolean): void;
    }
}

declare module 'fairygui-phaser/PackageItem' {
    import { BitmapFont } from 'fairygui-phaser/display/BitmapFont';
    import { Frame } from 'fairygui-phaser/display/MovieClip';
    import { PixelHitTestData } from 'fairygui-phaser/utils/PixelHitTest';
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { UIPackage } from 'fairygui-phaser/UIPackage';
    export class PackageItem {
        owner: UIPackage;
        type: number;
        objectType?: number;
        id: string;
        name: string;
        width: number;
        height: number;
        file: string;
        decoded?: boolean;
        loading?: Array<Function>;
        rawData?: ByteBuffer;
        highResolution?: Array<string>;
        branches?: Array<string>;
        scale9Grid?: Phaser.Geom.Rectangle;
        scaleByTile?: boolean;
        tileGridIndice?: number;
        smoothing?: boolean;
        texture?: Phaser.Textures.Texture;
        pixelHitTestData?: PixelHitTestData;
        interval?: number;
        repeatDelay?: number;
        swing?: boolean;
        frames?: Frame[];
        extensionType?: any;
        bitmapFont?: BitmapFont;
        skeletonAnchor?: Phaser.Geom.Point;
        constructor();
        getBranch(): PackageItem;
        getHighResolution(): PackageItem;
        toString(): string;
        load(): Object;
    }
}

declare module 'fairygui-phaser/Margin' {
    export class Margin {
        left: number;
        right: number;
        top: number;
        bottom: number;
        copy(source: Margin): void;
    }
}

declare module 'fairygui-phaser/IUISource' {
    export interface IUISource {
        fileName: string;
        loaded: boolean;
        load(callback: Function, thisObj: any): void;
    }
}

declare module 'fairygui-phaser/GTreeNode' {
    import { GComponent } from "fairygui-phaser/GComponent";
    import { GTree } from "fairygui-phaser/GTree";
    export class GTreeNode {
        data: any;
        _cell: GComponent;
        _resURL?: string;
        constructor(hasChild: boolean, resURL?: string);
        set expanded(value: boolean);
        get expanded(): boolean;
        get isFolder(): boolean;
        get parent(): GTreeNode;
        get text(): string;
        set text(value: string);
        get icon(): string;
        set icon(value: string);
        get cell(): GComponent;
        get level(): number;
        _setLevel(value: number): void;
        addChild(child: GTreeNode): GTreeNode;
        addChildAt(child: GTreeNode, index: number): GTreeNode;
        removeChild(child: GTreeNode): GTreeNode;
        removeChildAt(index: number): GTreeNode;
        removeChildren(beginIndex?: number, endIndex?: number): void;
        getChildAt(index: number): GTreeNode;
        getChildIndex(child: GTreeNode): number;
        getPrevSibling(): GTreeNode;
        getNextSibling(): GTreeNode;
        setChildIndex(child: GTreeNode, index: number): void;
        swapChildren(child1: GTreeNode, child2: GTreeNode): void;
        swapChildrenAt(index1: number, index2: number): void;
        get numChildren(): number;
        expandToRoot(): void;
        get tree(): GTree;
        _setTree(value: GTree): void;
    }
}

declare module 'fairygui-phaser/GTree' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GTreeNode } from 'fairygui-phaser/GTreeNode';
    import { GList } from 'fairygui-phaser/GList';
    import { GComponent } from 'fairygui-phaser/GComponent';
    export class GTree extends GList {
            /**
                * (node: GTreeNode, obj: GComponent) => void
                */
            treeNodeRender: (node: GTreeNode, obj: GComponent) => void;
            /**
                * (node: GTreeNode, expanded: boolean) => void;
                */
            treeNodeWillExpand: (node: GTreeNode, expanded: boolean) => void;
            constructor();
            get rootNode(): GTreeNode;
            get indent(): number;
            set indent(value: number);
            get clickToExpand(): number;
            set clickToExpand(value: number);
            getSelectedNode(): GTreeNode;
            getSelectedNodes(result?: Array<GTreeNode>): Array<GTreeNode>;
            selectNode(node: GTreeNode, scrollItToView?: boolean): void;
            unselectNode(node: GTreeNode): void;
            expandAll(folderNode?: GTreeNode): void;
            collapseAll(folderNode?: GTreeNode): void;
            _afterRemoved(node: GTreeNode): void;
            _afterExpanded(node: GTreeNode): void;
            _afterCollapsed(node: GTreeNode): void;
            _afterMoved(node: GTreeNode): void;
            protected dispatchItemEvent(item: GObject, evt: any): void;
            setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
            protected readItems(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-phaser/GTextInput' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GTextField } from 'fairygui-phaser/GTextField';
    export class GTextInput extends GTextField {
        constructor();
        createDisplayObject(): void;
        get nativeInput(): any;
        set text(value: string);
        get text(): string;
        get font(): string;
        set font(value: string);
        get fontSize(): number;
        set fontSize(value: number);
        get color(): string;
        set color(value: string);
        get align(): string;
        set align(value: string);
        get valign(): string;
        set valign(value: string);
        get leading(): number;
        set leading(value: number);
        get bold(): boolean;
        set bold(value: boolean);
        get italic(): boolean;
        set italic(value: boolean);
        get singleLine(): boolean;
        set singleLine(value: boolean);
        get stroke(): number;
        set stroke(value: number);
        get strokeColor(): string;
        set strokeColor(value: string);
        get password(): boolean;
        set password(value: boolean);
        get keyboardType(): string;
        set keyboardType(value: string);
        set editable(value: boolean);
        get editable(): boolean;
        set maxLength(value: number);
        get maxLength(): number;
        set promptText(value: string);
        get promptText(): string;
        set restrict(value: string);
        get restrict(): string;
        get textWidth(): number;
        requestFocus(): void;
        protected handleSizeChanged(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GTextField' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    export class GTextField extends GObject {
        protected _templateVars: {
            [index: string]: string;
        };
        protected _text: string;
        protected _autoSize: number;
        protected _widthAutoSize: boolean;
        protected _heightAutoSize: boolean;
        protected _ubbEnabled: boolean;
        protected _updatingSize: boolean;
        constructor();
        get font(): string;
        set font(value: string);
        get fontSize(): number;
        set fontSize(value: number);
        get color(): string;
        set color(value: string);
        get align(): string;
        set align(value: string);
        get valign(): string;
        set valign(value: string);
        get leading(): number;
        set leading(value: number);
        get letterSpacing(): number;
        set letterSpacing(value: number);
        get bold(): boolean;
        set bold(value: boolean);
        get italic(): boolean;
        set italic(value: boolean);
        get underline(): boolean;
        set underline(value: boolean);
        get singleLine(): boolean;
        set singleLine(value: boolean);
        get stroke(): number;
        set stroke(value: number);
        get strokeColor(): string;
        set strokeColor(value: string);
        set ubbEnabled(value: boolean);
        get ubbEnabled(): boolean;
        get autoSize(): number;
        set autoSize(value: number);
        protected updateAutoSize(): void;
        get textWidth(): number;
        protected parseTemplate(template: string): string;
        get templateVars(): {
            [index: string]: string;
        };
        set templateVars(value: {
            [index: string]: string;
        });
        setVar(name: string, value: string): GTextField;
        flushVars(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GSlider' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class GSlider extends GComponent {
        changeOnClick: boolean;
        /**是否可拖动开关**/
        canDrag: boolean;
        constructor();
        get titleType(): number;
        set titleType(value: number);
        get wholeNumbers(): boolean;
        set wholeNumbers(value: boolean);
        get min(): number;
        set min(value: number);
        get max(): number;
        set max(value: number);
        get value(): number;
        set value(value: number);
        update(): void;
        protected constructExtension(buffer: ByteBuffer): void;
        protected handleSizeChanged(): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GScrollBar' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { ScrollPane } from 'fairygui-phaser/ScrollPane';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class GScrollBar extends GComponent {
        constructor();
        setScrollPane(target: ScrollPane, vertical: boolean): void;
        setDisplayPerc(value: number): void;
        setScrollPerc(val: number): void;
        get minSize(): number;
        get gripDragging(): boolean;
        protected constructExtension(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-phaser/GRichTextField' {
    import { GTextField } from 'fairygui-phaser/GTextField';
    export class GRichTextField extends GTextField {
        constructor();
        createDisplayObject(): void;
        get div(): any;
        set text(value: string);
        get text(): string;
        get font(): string;
        set font(value: string);
        get fontSize(): number;
        set fontSize(value: number);
        get color(): string;
        set color(value: string);
        get align(): string;
        set align(value: string);
        get valign(): string;
        set valign(value: string);
        get leading(): number;
        set leading(value: number);
        get bold(): boolean;
        set bold(value: boolean);
        get italic(): boolean;
        set italic(value: boolean);
        get stroke(): number;
        set stroke(value: number);
        get strokeColor(): string;
        set strokeColor(value: string);
        set ubbEnabled(value: boolean);
        get ubbEnabled(): boolean;
        get textWidth(): number;
        protected updateAutoSize(): void;
        protected handleSizeChanged(): void;
    }
}

declare module 'fairygui-phaser/GProgressBar' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GTweener } from 'fairygui-phaser/tween/GTweener';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class GProgressBar extends GComponent {
        constructor();
        get titleType(): number;
        set titleType(value: number);
        get min(): number;
        set min(value: number);
        get max(): number;
        set max(value: number);
        get value(): number;
        set value(value: number);
        tweenValue(value: number, duration: number): GTweener;
        update(newValue: number): void;
        protected constructExtension(buffer: ByteBuffer): void;
        protected handleSizeChanged(): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GObjectPool' {
    import { GObject } from 'fairygui-phaser/GObject';
    export class GObjectPool {
        constructor();
        clear(): void;
        get count(): number;
        getObject(url: string): GObject;
        returnObject(obj: GObject): void;
    }
}

declare module 'fairygui-phaser/GMovieClip' {
    import { GObject } from 'fairygui-phaser/GObject';
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    export class GMovieClip extends GObject {
        constructor();
        get color(): string;
        set color(value: string);
        createDisplayObject(): void;
        get playing(): boolean;
        set playing(value: boolean);
        get frame(): number;
        set frame(value: number);
        get timeScale(): number;
        set timeScale(value: number);
        rewind(): void;
        syncStatus(anotherMc: GMovieClip): void;
        advance(timeInMiniseconds: number): void;
        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number, endHandler?: () => void): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        constructFromResource(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GLoader' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { MovieClip } from 'fairygui-phaser/display/MovieClip';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GComponent } from 'fairygui-phaser/GComponent';
    export class GLoader extends GObject {
        constructor();
        createDisplayObject(): void;
        dispose(): void;
        get url(): string;
        set url(value: string);
        get icon(): string;
        set icon(value: string);
        get align(): string;
        set align(value: string);
        get verticalAlign(): string;
        set verticalAlign(value: string);
        get fill(): number;
        set fill(value: number);
        get shrinkOnly(): boolean;
        set shrinkOnly(value: boolean);
        get autoSize(): boolean;
        set autoSize(value: boolean);
        get playing(): boolean;
        set playing(value: boolean);
        get frame(): number;
        set frame(value: number);
        get color(): string;
        set color(value: string);
        get fillMethod(): number;
        set fillMethod(value: number);
        get fillOrigin(): number;
        set fillOrigin(value: number);
        get fillClockwise(): boolean;
        set fillClockwise(value: boolean);
        get fillAmount(): number;
        set fillAmount(value: number);
        get showErrorSign(): boolean;
        set showErrorSign(value: boolean);
        get content(): MovieClip;
        get component(): GComponent;
        protected loadContent(): void;
        protected loadFromPackage(itemURL: string): void;
        protected loadExternal(): void;
        protected freeExternal(texture: Phaser.Textures.Texture): void;
        protected onExternalLoadSuccess(texture: Phaser.Textures.Texture): void;
        protected onExternalLoadFailed(): void;
        protected handleSizeChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GList' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObjectPool } from 'fairygui-phaser/GObjectPool';
    import { Controller } from 'fairygui-phaser/Controller';
    import { GComponent } from "fairygui-phaser/GComponent";
    import { GObject } from "fairygui-phaser/GObject";
    export class GList extends GComponent {
            /**
                * this.itemRenderer(number index, GObject item);
                */
            itemRenderer: (index: number, item: GObject) => void;
            /**
                * this.itemProvider(index:number):string;
                */
            itemProvider: (index: number) => string;
            scrollItemToViewOnClick: boolean;
            foldInvisibleItems: boolean;
            constructor();
            dispose(): void;
            get layout(): number;
            set layout(value: number);
            get lineCount(): number;
            set lineCount(value: number);
            get columnCount(): number;
            set columnCount(value: number);
            get lineGap(): number;
            set lineGap(value: number);
            get columnGap(): number;
            set columnGap(value: number);
            get align(): string;
            set align(value: string);
            get verticalAlign(): string;
            set verticalAlign(value: string);
            get virtualItemSize(): Phaser.Geom.Point;
            set virtualItemSize(value: Phaser.Geom.Point);
            get defaultItem(): string;
            set defaultItem(val: string);
            get autoResizeItem(): boolean;
            set autoResizeItem(value: boolean);
            get selectionMode(): number;
            set selectionMode(value: number);
            get selectionController(): Controller;
            set selectionController(value: Controller);
            get itemPool(): GObjectPool;
            getFromPool(url?: string): GObject;
            returnToPool(obj: GObject): void;
            addChildAt(child: GObject, index: number): GObject;
            addItem(url?: string): GObject;
            addItemFromPool(url?: string): GObject;
            removeChildAt(index: number, dispose?: boolean): GObject;
            removeChildToPoolAt(index: number): void;
            removeChildToPool(child: GObject): void;
            removeChildrenToPool(beginIndex?: number, endIndex?: number): void;
            get selectedIndex(): number;
            set selectedIndex(value: number);
            getSelection(result?: number[]): number[];
            addSelection(index: number, scrollItToView?: boolean): void;
            removeSelection(index: number): void;
            clearSelection(): void;
            selectAll(): void;
            selectNone(): void;
            selectReverse(): void;
            handleArrowKey(dir: number): void;
            protected dispatchItemEvent(item: GObject, evt: any): void;
            resizeToFit(itemCount?: number, minSize?: number): void;
            getMaxItemWidth(): number;
            protected handleSizeChanged(): void;
            handleControllerChanged(c: Controller): void;
            getSnappingPositionWithDir(xValue: number, yValue: number, xDir: number, yDir: number, result?: Phaser.Geom.Point): Phaser.Geom.Point;
            scrollToView(index: number, ani?: boolean, setFirst?: boolean): void;
            getFirstChildInView(): number;
            childIndexToItemIndex(index: number): number;
            itemIndexToChildIndex(index: number): number;
            setVirtual(): void;
            /**
                * Set the list to be virtual list, and has loop behavior.
                */
            setVirtualAndLoop(): void;
            /**
                * Set the list item count.
                * If the list instanceof not virtual, specified number of items will be created.
                * If the list instanceof virtual, only items in view will be created.
                */
            get numItems(): number;
            set numItems(value: number);
            refreshVirtualList(): void;
            protected updateBounds(): void;
            setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
            protected readItems(buffer: ByteBuffer): void;
            protected setupItem(buffer: ByteBuffer, obj: GObject): void;
            setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GLabel' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GTextField } from 'fairygui-phaser/GTextField';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class GLabel extends GComponent {
        protected _titleObject: GObject;
        protected _iconObject: GObject;
        constructor();
        get icon(): string;
        set icon(value: string);
        get title(): string;
        set title(value: string);
        get text(): string;
        set text(value: string);
        get titleColor(): string;
        set titleColor(value: string);
        get titleFontSize(): number;
        set titleFontSize(value: number);
        get color(): string;
        set color(value: string);
        set editable(val: boolean);
        get editable(): boolean;
        getTextField(): GTextField;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected constructExtension(buffer: ByteBuffer): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GImage' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { Image } from 'fairygui-phaser/display/Image';
    import { GObject } from 'fairygui-phaser/GObject';
    export class GImage extends GObject {
        constructor();
        get image(): Image;
        get color(): string;
        set color(value: string);
        get flip(): number;
        set flip(value: number);
        get fillMethod(): number;
        set fillMethod(value: number);
        get fillOrigin(): number;
        set fillOrigin(value: number);
        get fillClockwise(): boolean;
        set fillClockwise(value: boolean);
        get fillAmount(): number;
        set fillAmount(value: number);
        createDisplayObject(): void;
        constructFromResource(): void;
        protected handleXYChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GGroup' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    export class GGroup extends GObject {
        _updating: number;
        constructor();
        dispose(): void;
        get layout(): number;
        set layout(value: number);
        get lineGap(): number;
        set lineGap(value: number);
        get columnGap(): number;
        set columnGap(value: number);
        get excludeInvisibles(): boolean;
        set excludeInvisibles(value: boolean);
        get autoSizeDisabled(): boolean;
        set autoSizeDisabled(value: boolean);
        get mainGridMinSize(): number;
        set mainGridMinSize(value: number);
        get mainGridIndex(): number;
        set mainGridIndex(value: number);
        setBoundsChangedFlag(positionChangedOnly?: boolean): void;
        ensureSizeCorrect(): void;
        ensureBoundsCorrect(): void;
        moveChildren(dx: number, dy: number): void;
        resizeChildren(dw: number, dh: number): void;
        protected handleAlphaChanged(): void;
        handleVisibleChanged(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GGraph' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    export class GGraph extends GObject {
        constructor();
        drawRect(lineSize: number, lineColor: string, fillColor: string, cornerRadius?: number[]): void;
        drawEllipse(lineSize: number, lineColor: string, fillColor: string): void;
        drawRegularPolygon(lineSize: number, lineColor: string, fillColor: string, sides: number, startAngle?: number, distances?: number[]): void;
        drawPolygon(lineSize: number, lineColor: string, fillColor: string, points: number[]): void;
        get distances(): number[];
        set distances(value: number[]);
        get color(): string;
        set color(value: string);
        replaceMe(target: GObject): void;
        addBeforeMe(target: GObject): void;
        addAfterMe(target: GObject): void;
        setNativeObject(obj: any): void;
        createDisplayObject(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected handleSizeChanged(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GComboBox' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GTextField } from 'fairygui-phaser/GTextField';
    import { Controller } from 'fairygui-phaser/Controller';
    import { PopupDirection } from 'fairygui-phaser/FieldTypes';
    import { GList } from 'fairygui-phaser/GList';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class GComboBox extends GComponent {
        dropdown: GComponent;
        protected _titleObject: GObject;
        protected _iconObject: GObject;
        protected _list: GList;
        protected _items: string[];
        protected _icons?: string[];
        protected _values: string[];
        protected _popupDirection: PopupDirection;
        constructor();
        get text(): string;
        set text(value: string);
        get titleColor(): string;
        set titleColor(value: string);
        get titleFontSize(): number;
        set titleFontSize(value: number);
        get icon(): string;
        set icon(value: string);
        get visibleItemCount(): number;
        set visibleItemCount(value: number);
        get popupDirection(): number;
        set popupDirection(value: number);
        get items(): string[];
        set items(value: string[]);
        get icons(): string[];
        set icons(value: string[]);
        get values(): string[];
        set values(value: string[]);
        get selectedIndex(): number;
        set selectedIndex(val: number);
        get value(): string;
        set value(val: string);
        getTextField(): GTextField;
        protected setState(val: string): void;
        get selectionController(): Controller;
        set selectionController(value: Controller);
        handleControllerChanged(c: Controller): void;
        dispose(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected constructExtension(buffer: ByteBuffer): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
        protected showDropdown(): void;
    }
}

declare module 'fairygui-phaser/GButton' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GTextField } from 'fairygui-phaser/GTextField';
    import { Controller } from 'fairygui-phaser/Controller';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class GButton extends GComponent {
        protected _titleObject: GObject;
        protected _iconObject: GObject;
        static UP: string;
        static DOWN: string;
        static OVER: string;
        static SELECTED_OVER: string;
        static DISABLED: string;
        static SELECTED_DISABLED: string;
        constructor();
        get icon(): string;
        set icon(value: string);
        get selectedIcon(): string;
        set selectedIcon(value: string);
        get title(): string;
        set title(value: string);
        get text(): string;
        set text(value: string);
        get selectedTitle(): string;
        set selectedTitle(value: string);
        get titleColor(): string;
        set titleColor(value: string);
        get titleFontSize(): number;
        set titleFontSize(value: number);
        get sound(): string;
        set sound(val: string);
        get soundVolumeScale(): number;
        set soundVolumeScale(value: number);
        set selected(val: boolean);
        get selected(): boolean;
        get mode(): number;
        set mode(value: number);
        get relatedController(): Controller;
        set relatedController(val: Controller);
        get relatedPageId(): string;
        set relatedPageId(val: string);
        get changeStateOnClick(): boolean;
        set changeStateOnClick(value: boolean);
        get linkedPopup(): GObject;
        set linkedPopup(value: GObject);
        getTextField(): GTextField;
        protected setState(val: string): void;
        handleControllerChanged(c: Controller): void;
        protected handleGrayedChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected constructExtension(buffer: ByteBuffer): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-phaser/GBasicTextField' {
    import { GTextField } from 'fairygui-phaser/GTextField';
    export class GBasicTextField extends GTextField {
        constructor();
        createDisplayObject(): void;
        get nativeText(): Phaser.GameObjects.Text;
        set text(value: string);
        get text(): string;
        get font(): string;
        set font(value: string);
        get fontSize(): number;
        set fontSize(value: number);
        get color(): string;
        set color(value: string);
        get align(): string;
        set align(value: string);
        get valign(): string;
        set valign(value: string);
        get leading(): number;
        set leading(value: number);
        get letterSpacing(): number;
        set letterSpacing(value: number);
        get bold(): boolean;
        set bold(value: boolean);
        get italic(): boolean;
        set italic(value: boolean);
        get underline(): boolean;
        set underline(value: boolean);
        get singleLine(): boolean;
        set singleLine(value: boolean);
        get stroke(): number;
        set stroke(value: number);
        get strokeColor(): string;
        set strokeColor(value: string);
        protected updateAutoSize(): void;
        get textWidth(): number;
        ensureSizeCorrect(): void;
        typeset(): void;
        protected handleSizeChanged(): void;
        protected handleGrayedChanged(): void;
        flushVars(): void;
    }
    export interface LineInfo {
        width: number;
        height: number;
        textHeight: number;
        text: string;
        y: number;
    }
}

declare module 'fairygui-phaser/FieldTypes' {
    export enum ButtonMode {
        Common = 0,
        Check = 1,
        Radio = 2
    }
    export enum AutoSizeType {
        None = 0,
        Both = 1,
        Height = 2
    }
    export enum AlignType {
        Left = 0,
        Center = 1,
        Right = 2
    }
    export enum VertAlignType {
        Top = 0,
        Middle = 1,
        Bottom = 2
    }
    export enum LoaderFillType {
        None = 0,
        Scale = 1,
        ScaleMatchHeight = 2,
        ScaleMatchWidth = 3,
        ScaleFree = 4,
        ScaleNoBorder = 5
    }
    export enum ListLayoutType {
        SingleColumn = 0,
        SingleRow = 1,
        FlowHorizontal = 2,
        FlowVertical = 3,
        Pagination = 4
    }
    export enum ListSelectionMode {
        Single = 0,
        Multiple = 1,
        Multiple_SingleClick = 2,
        None = 3
    }
    export enum OverflowType {
        Visible = 0,
        Hidden = 1,
        Scroll = 2
    }
    export enum PackageItemType {
        Image = 0,
        MovieClip = 1,
        Sound = 2,
        Component = 3,
        Atlas = 4,
        Font = 5,
        Swf = 6,
        Misc = 7,
        Unknown = 8,
        Spine = 9,
        DragonBones = 10
    }
    export enum ObjectType {
        Image = 0,
        MovieClip = 1,
        Swf = 2,
        Graph = 3,
        Loader = 4,
        Group = 5,
        Text = 6,
        RichText = 7,
        InputText = 8,
        Component = 9,
        List = 10,
        Label = 11,
        Button = 12,
        ComboBox = 13,
        ProgressBar = 14,
        Slider = 15,
        ScrollBar = 16,
        Tree = 17,
        Loader3D = 18
    }
    export enum ProgressTitleType {
        Percent = 0,
        ValueAndMax = 1,
        Value = 2,
        Max = 3
    }
    export enum ScrollBarDisplayType {
        Default = 0,
        Visible = 1,
        Auto = 2,
        Hidden = 3
    }
    export enum ScrollType {
        Horizontal = 0,
        Vertical = 1,
        Both = 2
    }
    export enum FlipType {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
        Both = 3
    }
    export enum ChildrenRenderOrder {
        Ascent = 0,
        Descent = 1,
        Arch = 2
    }
    export enum GroupLayoutType {
        None = 0,
        Horizontal = 1,
        Vertical = 2
    }
    export enum PopupDirection {
        Auto = 0,
        Up = 1,
        Down = 2
    }
    export enum RelationType {
        Left_Left = 0,
        Left_Center = 1,
        Left_Right = 2,
        Center_Center = 3,
        Right_Left = 4,
        Right_Center = 5,
        Right_Right = 6,
        Top_Top = 7,
        Top_Middle = 8,
        Top_Bottom = 9,
        Middle_Middle = 10,
        Bottom_Top = 11,
        Bottom_Middle = 12,
        Bottom_Bottom = 13,
        Width = 14,
        Height = 15,
        LeftExt_Left = 16,
        LeftExt_Right = 17,
        RightExt_Left = 18,
        RightExt_Right = 19,
        TopExt_Top = 20,
        TopExt_Bottom = 21,
        BottomExt_Top = 22,
        BottomExt_Bottom = 23,
        Size = 24
    }
    export enum FillMethod {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
        Radial90 = 3,
        Radial180 = 4,
        Radial360 = 5
    }
    export enum FillOrigin {
        Top = 0,
        Bottom = 1,
        Left = 2,
        Right = 3,
        TopLeft = 0,
        TopRight = 1,
        BottomLeft = 2,
        BottomRight = 3
    }
    export enum FillOrigin90 {
        TopLeft = 0,
        TopRight = 1,
        BottomLeft = 2,
        BottomRight = 3
    }
    export enum ObjectPropID {
        Text = 0,
        Icon = 1,
        Color = 2,
        OutlineColor = 3,
        Playing = 4,
        Frame = 5,
        DeltaTime = 6,
        TimeScale = 7,
        FontSize = 8,
        Selected = 9
    }
}

declare module 'fairygui-phaser/Events' {
    import { InteractiveEvent } from "fairygui-phaser/event/DisplayObjectEvent";
    export class Events {
        static STATE_CHANGED: string;
        static XY_CHANGED: string;
        static SIZE_CHANGED: string;
        static SIZE_DELAY_CHANGE: string;
        static CLICK_ITEM: string;
        static SCROLL: string;
        static SCROLL_END: string;
        static DROP: string;
        static DRAG_START: string;
        static DRAG_MOVE: string;
        static DRAG_END: string;
        static PULL_DOWN_RELEASE: string;
        static PULL_UP_RELEASE: string;
        static GEAR_STOP: string;
        static $event: InteractiveEvent;
        static createEvent(type: string, target: Phaser.GameObjects.GameObject, source?: {
            target?: Phaser.GameObjects.Container;
            touchId?: number;
        }): InteractiveEvent;
        static dispatch(type: string, target: Phaser.GameObjects.GameObject, source?: {
            target?: Phaser.GameObjects.GameObject;
            touchId?: number;
        }): void;
    }
}

declare module 'fairygui-phaser/DragDropManager' {
    import { GObject } from 'fairygui-phaser/GObject';
    export class DragDropManager {
        static get inst(): DragDropManager;
        constructor();
        get dragAgent(): GObject;
        get dragging(): boolean;
        startDrag(source: GObject, icon: string, sourceData?: any, touchID?: number): void;
        cancel(): void;
    }
}

declare module 'fairygui-phaser/Controller' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GComponent } from "fairygui-phaser/GComponent";
    export class Controller extends Phaser.Events.EventEmitter {
            name: string;
            parent: GComponent;
            autoRadioGroupDepth?: boolean;
            changing: boolean;
            constructor();
            dispose(): void;
            get selectedIndex(): number;
            set selectedIndex(value: number);
            /**
                * 功能和设置selectedIndex一样，但不会触发事件
                */
            setSelectedIndex(value: number): void;
            get previsousIndex(): number;
            get selectedPage(): string;
            set selectedPage(val: string);
            /**
                * 功能和设置selectedPage一样，但不会触发事件
                */
            setSelectedPage(value: string): void;
            get previousPage(): string;
            get pageCount(): number;
            getPageName(index: number): string;
            addPage(name: string): void;
            addPageAt(name: string, index: number): void;
            removePage(name: string): void;
            removePageAt(index: number): void;
            clearPages(): void;
            hasPage(aName: string): boolean;
            getPageIndexById(aId: string): number;
            getPageIdByName(aName: string): string;
            getPageNameById(aId: string): string;
            getPageId(index: number): string;
            get selectedPageId(): string;
            set selectedPageId(val: string);
            set oppositePageId(val: string);
            get previousPageId(): string;
            runActions(): void;
            setup(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-phaser/AsyncOperation' {
    import { GObject } from 'fairygui-phaser/GObject';
    export class AsyncOperation {
        /**
          * this.callback(obj:GObject)
          */
        callback: (obj: GObject) => void;
        constructor();
        createObject(pkgName: string, resName: string): void;
        createObjectFromURL(url: string): void;
        cancel(): void;
    }
}

declare module 'fairygui-phaser/AssetProxy' {
    export enum LoaderType {
        IMAGE = "image",
        ATLAS = "atlas",
        AUDIO = "audio",
        VIDEO = "video",
        JSON = "json",
        SCRIPT = "script",
        GLSL = "glsl",
        BITMAPFONT = "bitmapFont",
        SPRITESHEET = "spritesheet"
    }
    export class AssetProxy {
        constructor();
        static get inst(): AssetProxy;
        getRes(key: string): string;
        load(key: string, url: any, type: string, completeCallBack: Function, _errorCallBack?: Function): void;
        startLoad(): void;
    }
}

declare module 'fairygui-phaser/action' {
    export * from "fairygui-phaser/action/ChangePageAction";
    export * from "fairygui-phaser/action/ControllerAction";
    export * from "fairygui-phaser/action/PlayTransitionAction";
}

declare module 'fairygui-phaser/display' {
    export * from "fairygui-phaser/display/BitmapFont";
    export * from "fairygui-phaser/display/FillUtils";
    export * from "fairygui-phaser/display/Graphics";
    export * from "fairygui-phaser/display/Image";
    export * from "fairygui-phaser/display/MovieClip";
    export * from "fairygui-phaser/display/UIStage";
}

declare module 'fairygui-phaser/event' {
    export * from "fairygui-phaser/event/DisplayObjectEvent";
    export * from "fairygui-phaser/event/Event";
}

declare module 'fairygui-phaser/gears' {
    export * from "fairygui-phaser/gears/GearAnimation";
    export * from "fairygui-phaser/gears/GearBase";
    export * from "fairygui-phaser/gears/GearColor";
    export * from "fairygui-phaser/gears/GearDisplay";
    export * from "fairygui-phaser/gears/GearDisplay2";
    export * from "fairygui-phaser/gears/GearFontSize";
    export * from "fairygui-phaser/gears/GearIcon";
    export * from "fairygui-phaser/gears/GearLook";
    export * from "fairygui-phaser/gears/GearSize";
    export * from "fairygui-phaser/gears/GearText";
    export * from "fairygui-phaser/gears/GearXY";
}

declare module 'fairygui-phaser/tween' {
    export * from "fairygui-phaser/tween/EaseManager";
    export * from "fairygui-phaser/tween/EaseType";
    export * from "fairygui-phaser/tween/GPath";
    export * from "fairygui-phaser/tween/GPathPoint";
    export * from "fairygui-phaser/tween/GTween";
    export * from "fairygui-phaser/tween/GTweener";
    export * from "fairygui-phaser/tween/TweenManager";
    export * from "fairygui-phaser/tween/TweenValue";
}

declare module 'fairygui-phaser/utils' {
    export * from "fairygui-phaser/utils/Byte";
    export * from "fairygui-phaser/utils/ByteBuffer";
    export * from "fairygui-phaser/utils/ChildHitArea";
    export * from "fairygui-phaser/utils/ColorMatrix";
    export * from "fairygui-phaser/utils/DOMEventManager";
    export * from "fairygui-phaser/utils/HitArea";
    export * from "fairygui-phaser/utils/PixelHitTest";
    export * from "fairygui-phaser/utils/ToolSet";
    export * from "fairygui-phaser/utils/UBBParser";
}

declare module 'fairygui-phaser/display/UIStage' {
    import { UISceneDisplay } from "fairygui-phaser/GRoot";
    export const enum StageOrientation {
        AUTO = "auto",
        PORTRAIT = "portrait",
        LANDSCAPE = "landscape"
    }
    export const enum StageScaleMode {
        NO_SCALE = "noScale",
        SHOW_ALL = "showAll",
        NO_BORDER = "noBorder",
        EXACT_FIT = "exactFit",
        FIXED_WIDTH = "fixedWidth",
        FIXED_HEIGHT = "fixedHeight",
        FIXED_AUTO = "fixedAuto"
    }
    export const enum StageAlign {
        LEFT = 0,
        CENTER = 1,
        RIGHT = 2,
        TOP = 3,
        MIDDLE = 4,
        BOTTOM = 5
    }
    export interface UIStageOptions {
        scaleMode?: StageScaleMode;
        orientation?: StageOrientation;
        resolution?: number;
        designWidth: number;
        designHeight: number;
        alignV?: StageAlign;
        alignH?: StageAlign;
        fallbackWidth?: number;
        fallbackHeight?: number;
        [key: string]: string | number;
    }
    export class DefaultUIStageOptions implements UIStageOptions {
        scaleMode?: StageScaleMode;
        orientation?: StageOrientation;
        resolution?: number;
        designWidth: number;
        designHeight: number;
        alignV: StageAlign;
        alignH: StageAlign;
        fallbackWidth: number;
        fallbackHeight: number;
        [key: string]: string | number;
    }
    export class UIStage extends Phaser.Events.EventEmitter {
        protected $appStage: Phaser.GameObjects.Container;
        protected $options: UIStageOptions;
        protected $width: number;
        protected $height: number;
        protected $scaleX: number;
        protected $scaleY: number;
        protected $canvasMatrix: Phaser.GameObjects.Components.TransformMatrix;
        offsetX: number;
        offsetY: number;
        constructor(scene: Phaser.Scene);
        get nativeStage(): Phaser.Input.InputPlugin;
        get stageWidth(): number;
        get stageHeight(): number;
        addChild(child: Phaser.GameObjects.GameObject, type: UISceneDisplay, index?: number): void;
        removeChild(child: Phaser.GameObjects.GameObject, type: UISceneDisplay): void;
        /**@internal */
        updateScreenSize(): void;
    }
}

declare module 'fairygui-phaser/utils/ByteBuffer' {
    export class ByteBuffer {
        stringTable: Array<string>;
        version: number;
        littleEndian: boolean;
        protected _view: DataView;
        protected _bytes: Uint8Array;
        protected _pos: number;
        protected _length: number;
        constructor(buffer: ArrayBuffer, offset?: number, length?: number);
        get data(): Uint8Array;
        get position(): number;
        set position(value: number);
        skip(count: number): void;
        readByte(): number;
        readUbyte(): number;
        readBool(): boolean;
        readShort(): number;
        readUshort(): number;
        readInt(): number;
        readUint(): number;
        readFloat(): number;
        readString(len?: number): string;
        readS(): string;
        readSArray(cnt: number): Array<string>;
        writeS(value: string): void;
        readColor(hasAlpha?: boolean): number;
        readColorS(hasAlpha?: boolean): string;
        readChar(): string;
        readBuffer(): ByteBuffer;
        seek(indexTablePos: number, blockIndex: number): boolean;
    }
}

declare module 'fairygui-phaser/gears/GearBase' {
    import { GTweener } from 'fairygui-phaser/tween/GTweener';
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { Controller } from 'fairygui-phaser/Controller';
    import { GObject } from 'fairygui-phaser/GObject';
    export class GearBase {
        static disableAllTweenEffect: boolean;
        protected _owner: GObject;
        protected _controller: Controller;
        protected _tweenConfig?: GearTweenConfig;
        static create(owner: GObject, index: number): GearBase;
        constructor(owner: GObject);
        dispose(): void;
        get controller(): Controller;
        set controller(val: Controller);
        get tweenConfig(): GearTweenConfig;
        setup(buffer: ByteBuffer): void;
        updateFromRelations(dx: number, dy: number): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        protected init(): void;
        apply(): void;
        updateState(): void;
    }
    export class GearTweenConfig {
        tween: boolean;
        easeType: number;
        duration: number;
        delay: number;
        _displayLockToken: number;
        _tweener: GTweener;
        constructor();
    }
}

declare module 'fairygui-phaser/display/Graphics' {
    export enum GRAPHICSTYPE {
        RECTANGLE = "rectangle",
        CIRCLE = "circle",
        POLY = "POLY",
        ELLIPSE = "ellipse"
    }
    export class Graphics extends Phaser.GameObjects.Graphics {
        constructor(scene: Phaser.Scene);
        get width(): number;
        get height(): number;
        get radius(): number;
        get points(): Phaser.Geom.Point[];
        fillRect(x: number, y: number, width: number, height: number): this;
        fillCircle(x: number, y: number, radius: number): this;
        fillTriangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number): this;
        fillEllipse(x: number, y: number, width: number, height: number, smoothness?: number): this;
        get graphicsType(): GRAPHICSTYPE;
        set graphicsType(value: GRAPHICSTYPE);
        clear(): this;
    }
}

declare module 'fairygui-phaser/display/BitmapFont' {
    export class BitmapFont {
        id: string;
        size: number;
        ttf?: boolean;
        glyphs: {
            [index: string]: BMGlyph;
        };
        resizable?: boolean;
        tint?: boolean;
        constructor();
    }
    export interface BMGlyph {
        x?: number;
        y?: number;
        width?: number;
        height?: number;
        advance?: number;
        lineHeight?: number;
        channel?: number;
        texture?: Phaser.Textures.Texture;
    }
}

declare module 'fairygui-phaser/display/MovieClip' {
    import { Image } from "fairygui-phaser/display/Image";
    export interface Frame {
        addDelay: number;
        texture?: Phaser.Textures.Texture;
    }
    export class MovieClip extends Image {
        interval: number;
        swing: boolean;
        repeatDelay: number;
        timeScale: number;
        constructor();
        get frames(): Frame[];
        set frames(value: Frame[]);
        get frameCount(): number;
        get frame(): number;
        set frame(value: number);
        get playing(): boolean;
        set playing(value: boolean);
        rewind(): void;
        syncStatus(anotherMc: MovieClip): void;
        advance(timeInMiniseconds: number): void;
        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number, endHandler?: () => void): void;
        update(): void;
    }
}

declare module 'fairygui-phaser/utils/PixelHitTest' {
    import { Byte } from 'fairygui-phaser/utils/Byte';
    import { HitArea } from 'fairygui-phaser/utils/HitArea';
    export class PixelHitTest extends HitArea {
        offsetX: number;
        offsetY: number;
        scaleX: number;
        scaleY: number;
        constructor(data: PixelHitTestData, offsetX: number, offsetY: number);
        contains(x: number, y: number): boolean;
    }
    export class PixelHitTestData {
        pixelWidth: number;
        scale: number;
        pixels: number[];
        constructor();
        load(ba: Byte): void;
    }
}

declare module 'fairygui-phaser/tween/GTweener' {
    import { TweenValue } from 'fairygui-phaser/tween/TweenValue';
    import { GPath } from 'fairygui-phaser/tween/GPath';
    export class GTweener {
        _target: any;
        _propType: any;
        _killed: boolean;
        _paused: boolean;
        constructor();
        setDelay(value: number): GTweener;
        get delay(): number;
        setDuration(value: number): GTweener;
        get duration(): number;
        setBreakpoint(value: number): GTweener;
        setEase(value: number): GTweener;
        setEasePeriod(value: number): GTweener;
        setEaseOvershootOrAmplitude(value: number): GTweener;
        setRepeat(repeat: number, yoyo?: boolean): GTweener;
        get repeat(): number;
        setTimeScale(value: number): GTweener;
        setSnapping(value: boolean): GTweener;
        setTarget(value: any, propType?: any): GTweener;
        get target(): any;
        setPath(value: GPath): GTweener;
        setUserData(value: any): GTweener;
        get userData(): any;
        onUpdate(callback: Function, caller?: any): GTweener;
        onStart(callback: Function, caller?: any): GTweener;
        onComplete(callback: Function, caller?: any): GTweener;
        get startValue(): TweenValue;
        get endValue(): TweenValue;
        get value(): TweenValue;
        get deltaValue(): TweenValue;
        get normalizedTime(): number;
        get completed(): boolean;
        get allCompleted(): boolean;
        setPaused(paused: boolean): GTweener;
        /**
          * seek position of the tween, in seconds.
          */
        seek(time: number): void;
        kill(complete?: boolean): void;
        _to(start: number, end: number, duration: number): GTweener;
        _to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;
        _to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;
        _to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;
        _toColor(start: number, end: number, duration: number): GTweener;
        _shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;
        _init(): void;
        _reset(): void;
        _update(dt: number): void;
    }
}

declare module 'fairygui-phaser/display/Image' {
    export class Image extends Phaser.GameObjects.Container {
        protected _source: Phaser.Textures.Texture;
        protected _scaleByTile?: boolean;
        protected _scale9Grid?: Phaser.Geom.Rectangle;
        constructor(scene: Phaser.Scene);
        setSize(width: number, height: number): this;
        get texture(): Phaser.Textures.Texture;
        set texture(value: Phaser.Textures.Texture);
        get scale9Grid(): Phaser.Geom.Rectangle;
        set scale9Grid(value: Phaser.Geom.Rectangle);
        get scaleByTile(): boolean;
        set scaleByTile(value: boolean);
        get tileGridIndice(): number;
        set tileGridIndice(value: number);
        get fillMethod(): number;
        set fillMethod(value: number);
        get fillOrigin(): number;
        set fillOrigin(value: number);
        get fillClockwise(): boolean;
        set fillClockwise(value: boolean);
        get fillAmount(): number;
        set fillAmount(value: number);
        get color(): string;
        set color(value: string);
        protected rebuild(): void;
    }
}

declare module 'fairygui-phaser/event/DisplayObjectEvent' {
    export class DisplayObjectEvent {
        static XY_CHANGED: string;
        static SIZE_CHANGED: string;
        static VISIBLE_CHANGED: string;
        static SIZE_DELAY_CHANGE: string;
        static MOUSE_WHEEL: string;
    }
    export class InteractiveEvent {
        static POINTER_DOWN: string;
        static POINTER_UP: string;
        static POINTER_OVER: string;
        static POINTER_OUT: string;
        static POINTER_MOVE: string;
        static GAMEOBJECT_DOWN: string;
        static GAMEOBJECT_UP: string;
        static GAMEOBJECT_OVER: string;
        static GAMEOBJECT_OUT: string;
        static GAMEOBJECT_MOVE: string;
    }
}

declare module 'fairygui-phaser/action/ChangePageAction' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { ControllerAction } from 'fairygui-phaser/action/ControllerAction';
    import { Controller } from 'fairygui-phaser/Controller';
    export class ChangePageAction extends ControllerAction {
        objectId: string;
        controllerName: string;
        targetPage: string;
        constructor();
        protected enter(controller: Controller): void;
        setup(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-phaser/action/ControllerAction' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { Controller } from 'fairygui-phaser/Controller';
    export class ControllerAction {
        fromPage: string[];
        toPage: string[];
        static createAction(type: number): ControllerAction;
        constructor();
        run(controller: Controller, prevPage: string, curPage: string): void;
        protected enter(controller: Controller): void;
        protected leave(controller: Controller): void;
        setup(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-phaser/action/PlayTransitionAction' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { Controller } from 'fairygui-phaser/Controller';
    import { ControllerAction } from 'fairygui-phaser/action/ControllerAction';
    export class PlayTransitionAction extends ControllerAction {
        transitionName: string;
        playTimes: number;
        delay: number;
        stopOnExit: boolean;
        constructor();
        protected enter(controller: Controller): void;
        protected leave(controller: Controller): void;
        setup(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-phaser/display/FillUtils' {
    export function fillImage(w: number, h: number, method: number, origin: number, clockwise: boolean, amount: number): number[];
}

declare module 'fairygui-phaser/event/Event' {
    export class Event {
    }
}

declare module 'fairygui-phaser/gears/GearAnimation' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    export class GearAnimation extends GearBase {
        constructor(owner: GObject);
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'fairygui-phaser/gears/GearColor' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    export class GearColor extends GearBase {
        constructor(owner: GObject);
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'fairygui-phaser/gears/GearDisplay' {
    import { GObject } from 'fairygui-phaser/GObject';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    export class GearDisplay extends GearBase {
        pages: string[];
        constructor(owner: GObject);
        protected init(): void;
        apply(): void;
        addLock(): number;
        releaseLock(token: number): void;
        get connected(): boolean;
    }
}

declare module 'fairygui-phaser/gears/GearDisplay2' {
    import { GObject } from 'fairygui-phaser/GObject';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    export class GearDisplay2 extends GearBase {
        pages: string[];
        condition: number;
        constructor(owner: GObject);
        protected init(): void;
        apply(): void;
        evaluate(connected: boolean): boolean;
    }
}

declare module 'fairygui-phaser/gears/GearFontSize' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    export class GearFontSize extends GearBase {
        constructor(owner: GObject);
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'fairygui-phaser/gears/GearIcon' {
    import { GObject } from 'fairygui-phaser/GObject';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    export class GearIcon extends GearBase {
        constructor(owner: GObject);
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'fairygui-phaser/gears/GearLook' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    export class GearLook extends GearBase {
        constructor(owner: GObject);
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'fairygui-phaser/gears/GearSize' {
    import { GObject } from 'fairygui-phaser/GObject';
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    export class GearSize extends GearBase {
        constructor(owner: GObject);
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
        updateFromRelations(dx: number, dy: number): void;
    }
}

declare module 'fairygui-phaser/gears/GearText' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    export class GearText extends GearBase {
        constructor(owner: GObject);
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'fairygui-phaser/gears/GearXY' {
    import { ByteBuffer } from 'fairygui-phaser/utils/ByteBuffer';
    import { GObject } from 'fairygui-phaser/GObject';
    import { GearBase } from 'fairygui-phaser/gears/GearBase';
    export class GearXY extends GearBase {
        positionsInPercent: boolean;
        constructor(owner: GObject);
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        addExtStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
        updateFromRelations(dx: number, dy: number): void;
    }
}

declare module 'fairygui-phaser/tween/EaseManager' {
    export function evaluateEase(easeType: number, time: number, duration: number, overshootOrAmplitude: number, period: number): number;
}

declare module 'fairygui-phaser/tween/EaseType' {
    export class EaseType {
        static Linear: number;
        static SineIn: number;
        static SineOut: number;
        static SineInOut: number;
        static QuadIn: number;
        static QuadOut: number;
        static QuadInOut: number;
        static CubicIn: number;
        static CubicOut: number;
        static CubicInOut: number;
        static QuartIn: number;
        static QuartOut: number;
        static QuartInOut: number;
        static QuintIn: number;
        static QuintOut: number;
        static QuintInOut: number;
        static ExpoIn: number;
        static ExpoOut: number;
        static ExpoInOut: number;
        static CircIn: number;
        static CircOut: number;
        static CircInOut: number;
        static ElasticIn: number;
        static ElasticOut: number;
        static ElasticInOut: number;
        static BackIn: number;
        static BackOut: number;
        static BackInOut: number;
        static BounceIn: number;
        static BounceOut: number;
        static BounceInOut: number;
        static Custom: number;
    }
}

declare module 'fairygui-phaser/tween/GPath' {
    import { GPathPoint } from 'fairygui-phaser/tween/GPathPoint';
    export class GPath {
        constructor();
        get length(): number;
        create(pt1: Array<GPathPoint> | GPathPoint, pt2?: GPathPoint, pt3?: GPathPoint, pt4?: GPathPoint): void;
        clear(): void;
        getPointAt(t: number, result?: Phaser.Geom.Point): Phaser.Geom.Point;
        get segmentCount(): number;
        getAnchorsInSegment(segmentIndex: number, points?: Array<Phaser.Geom.Point>): Array<Phaser.Geom.Point>;
        getPointsInSegment(segmentIndex: number, t0: number, t1: number, points?: Array<Phaser.Geom.Point>, ts?: Array<number>, pointDensity?: number): Array<Phaser.Geom.Point>;
        getAllPoints(points?: Array<Phaser.Geom.Point>, ts?: Array<number>, pointDensity?: number): Array<Phaser.Geom.Point>;
    }
}

declare module 'fairygui-phaser/tween/GPathPoint' {
    export enum CurveType {
        CRSpline = 0,
        Bezier = 1,
        CubicBezier = 2,
        Straight = 3
    }
    export class GPathPoint {
        x: number;
        y: number;
        control1_x: number;
        control1_y: number;
        control2_x: number;
        control2_y: number;
        curveType: number;
        constructor();
        static newPoint(x?: number, y?: number, curveType?: number): GPathPoint;
        static newBezierPoint(x?: number, y?: number, control1_x?: number, control1_y?: number): GPathPoint;
        static newCubicBezierPoint(x?: number, y?: number, control1_x?: number, control1_y?: number, control2_x?: number, control2_y?: number): GPathPoint;
        clone(): GPathPoint;
    }
}

declare module 'fairygui-phaser/tween/GTween' {
    import { GTweener } from 'fairygui-phaser/tween/GTweener';
    export class GTween {
        static catchCallbackExceptions: boolean;
        static to(start: number, end: number, duration: number): GTweener;
        static to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;
        static to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;
        static to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;
        static toColor(start: number, end: number, duration: number): GTweener;
        static delayedCall(delay: number): GTweener;
        static shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;
        static isTweening(target: any, propType?: any): Boolean;
        static kill(target: any, complete?: boolean, propType?: any): void;
        static getTween(target: any, propType?: any): GTweener;
    }
}

declare module 'fairygui-phaser/tween/TweenManager' {
    import { GTweener } from 'fairygui-phaser/tween/GTweener';
    export class TweenManager {
        static createTween(): GTweener;
        static isTweening(target: any, propType: any): boolean;
        static killTweens(target: any, completed: boolean, propType: any): boolean;
        static getTween(target: any, propType: any): GTweener;
        static update(): void;
    }
}

declare module 'fairygui-phaser/tween/TweenValue' {
    export class TweenValue {
        x: number;
        y: number;
        z: number;
        w: number;
        constructor();
        get color(): number;
        set color(value: number);
        getField(index: number): number;
        setField(index: number, value: number): void;
        setZero(): void;
    }
}

declare module 'fairygui-phaser/utils/Byte' {
    /**
        * <p> <code>Byte</code> 类提供用于优化读取、写入以及处理二进制数据的方法和属性。</p>
        * <p> <code>Byte</code> 类适用于需要在字节层访问数据的高级开发人员。</p>
        */
    export class Byte {
            /**
                * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>
                * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>
                * <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
                */
            static BIG_ENDIAN: string;
            /**
                * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>
                * <p> <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。<br/>
                * <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。</p>
                */
            static LITTLE_ENDIAN: string;
            /**@private 是否为小端数据。*/
            protected _xd_: boolean;
            /**@private 原始数据。*/
            protected _d_: any;
            /**@private DataView*/
            protected _u8d_: any;
            /**@private */
            protected _pos_: number;
            /**@private */
            protected _length: number;
            /**
                * <p>获取当前主机的字节序。</p>
                * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。</p>
                * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>
                * <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
                * @return 当前系统的字节序。
                */
            static getSystemEndian(): string;
            /**
                * 创建一个 <code>Byte</code> 类的实例。
                * @param	data	用于指定初始化的元素数目，或者用于初始化的TypedArray对象、ArrayBuffer对象。如果为 null ，则预分配一定的内存空间，当可用空间不足时，优先使用这部分内存，如果还不够，则重新分配所需内存。
                */
            constructor(data?: any);
            /**
                * 获取此对象的 ArrayBuffer 数据，数据只包含有效数据部分。
                */
            get buffer(): ArrayBuffer;
            /**
                * <p> <code>Byte</code> 实例的字节序。取值为：<code>BIG_ENDIAN</code> 或 <code>BIG_ENDIAN</code> 。</p>
                * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>
                * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>
                *  <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
                */
            get endian(): string;
            set endian(value: string);
            /**
                * <p> <code>Byte</code> 对象的长度（以字节为单位）。</p>
                * <p>如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧；如果将长度设置为小于当前长度的值，将会截断该字节数组。</p>
                * <p>如果要设置的长度大于当前已分配的内存空间的字节长度，则重新分配内存空间，大小为以下两者较大者：要设置的长度、当前已分配的长度的2倍，并将原有数据拷贝到新的内存空间中；如果要设置的长度小于当前已分配的内存空间的字节长度，也会重新分配内存空间，大小为要设置的长度，并将原有数据从头截断为要设置的长度存入新的内存空间中。</p>
                */
            set length(value: number);
            get length(): number;
            /**
                * @private
                * <p>常用于解析固定格式的字节流。</p>
                * <p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>
                * @return 读取的字符串。
                */
            getString(): string;
            /**
                * <p>常用于解析固定格式的字节流。</p>
                * <p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>
                * @return 读取的字符串。
                */
            readString(): string;
            /**
                * @private
                * <p>从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。</p>
                * <p><b>注意：</b>返回的 Float32Array 对象，在 JavaScript 环境下，是原生的 HTML5 Float32Array 对象，对此对象的读取操作都是基于运行此程序的当前主机字节序，此顺序可能与实际数据的字节序不同，如果使用此对象进行读取，需要用户知晓实际数据的字节序和当前主机字节序，如果相同，可正常读取，否则需要用户对实际数据(Float32Array.buffer)包装一层 DataView ，使用 DataView 对象可按照指定的字节序进行读取。</p>
                * @param	start	开始位置。
                * @param	len		需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
                * @return  读取的 Float32Array 对象。
                */
            getFloat32Array(start: number, len: number): any;
            /**
                * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。
                * @param	start	开始位置。
                * @param	len		需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
                * @return  读取的 Float32Array 对象。
                */
            readFloat32Array(start: number, len: number): any;
            /**
                * @private
                * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。
                * @param	start	开始位置。
                * @param	len		需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
                * @return  读取的 Uint8Array 对象。
                */
            getUint8Array(start: number, len: number): Uint8Array;
            /**
                * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。
                * @param	start	开始位置。
                * @param	len		需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
                * @return  读取的 Uint8Array 对象。
                */
            readUint8Array(start: number, len: number): Uint8Array;
            /**
                * @private
                * <p>从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。</p>
                * <p><b>注意：</b>返回的 Int16Array 对象，在 JavaScript 环境下，是原生的 HTML5 Int16Array 对象，对此对象的读取操作都是基于运行此程序的当前主机字节序，此顺序可能与实际数据的字节序不同，如果使用此对象进行读取，需要用户知晓实际数据的字节序和当前主机字节序，如果相同，可正常读取，否则需要用户对实际数据(Int16Array.buffer)包装一层 DataView ，使用 DataView 对象可按照指定的字节序进行读取。</p>
                * @param	start	开始读取的字节偏移量位置。
                * @param	len		需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
                * @return  读取的 Int16Array 对象。
                */
            getInt16Array(start: number, len: number): any;
            /**
                * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。
                * @param	start	开始读取的字节偏移量位置。
                * @param	len		需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
                * @return  读取的 Uint8Array 对象。
                */
            readInt16Array(start: number, len: number): any;
            /**
                * @private
                * 从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。
                * @return 单精度（32 位）浮点数。
                */
            getFloat32(): number;
            /**
                * 从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。
                * @return 单精度（32 位）浮点数。
                */
            readFloat32(): number;
            /**
                * @private
                * 从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。
                * @return 双精度（64 位）浮点数。
                */
            getFloat64(): number;
            /**
                * 从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。
                * @return 双精度（64 位）浮点数。
                */
            readFloat64(): number;
            /**
                * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。
                * @param	value	单精度（32 位）浮点数。
                */
            writeFloat32(value: number): void;
            /**
                * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。
                * @param	value	双精度（64 位）浮点数。
                */
            writeFloat64(value: number): void;
            /**
                * @private
                * 从字节流的当前字节偏移量位置处读取一个 Int32 值。
                * @return Int32 值。
                */
            getInt32(): number;
            /**
                * 从字节流的当前字节偏移量位置处读取一个 Int32 值。
                * @return Int32 值。
                */
            readInt32(): number;
            /**
                * @private
                * 从字节流的当前字节偏移量位置处读取一个 Uint32 值。
                * @return Uint32 值。
                */
            getUint32(): number;
            /**
                * 从字节流的当前字节偏移量位置处读取一个 Uint32 值。
                * @return Uint32 值。
                */
            readUint32(): number;
            /**
                * 在字节流的当前字节偏移量位置处写入指定的 Int32 值。
                * @param	value	需要写入的 Int32 值。
                */
            writeInt32(value: number): void;
            /**
                * 在字节流的当前字节偏移量位置处写入 Uint32 值。
                * @param	value	需要写入的 Uint32 值。
                */
            writeUint32(value: number): void;
            /**
                * @private
                * 从字节流的当前字节偏移量位置处读取一个 Int16 值。
                * @return Int16 值。
                */
            getInt16(): number;
            /**
                * 从字节流的当前字节偏移量位置处读取一个 Int16 值。
                * @return Int16 值。
                */
            readInt16(): number;
            /**
                * @private
                * 从字节流的当前字节偏移量位置处读取一个 Uint16 值。
                * @return Uint16 值。
                */
            getUint16(): number;
            /**
                * 从字节流的当前字节偏移量位置处读取一个 Uint16 值。
                * @return Uint16 值。
                */
            readUint16(): number;
            /**
                * 在字节流的当前字节偏移量位置处写入指定的 Uint16 值。
                * @param	value	需要写入的Uint16 值。
                */
            writeUint16(value: number): void;
            /**
                * 在字节流的当前字节偏移量位置处写入指定的 Int16 值。
                * @param	value	需要写入的 Int16 值。
                */
            writeInt16(value: number): void;
            /**
                * @private
                * 从字节流的当前字节偏移量位置处读取一个 Uint8 值。
                * @return Uint8 值。
                */
            getUint8(): number;
            /**
                * 从字节流的当前字节偏移量位置处读取一个 Uint8 值。
                * @return Uint8 值。
                */
            readUint8(): number;
            /**
                * 在字节流的当前字节偏移量位置处写入指定的 Uint8 值。
                * @param	value	需要写入的 Uint8 值。
                */
            writeUint8(value: number): void;
            /**
                * @internal
                * 从字节流的指定字节偏移量位置处读取一个 Uint8 值。
                * @param	pos	字节读取位置。
                * @return Uint8 值。
                */
            _getUInt8(pos: number): number;
            /**
                * @internal
                * 从字节流的指定字节偏移量位置处读取一个 Uint8 值。
                * @param	pos	字节读取位置。
                * @return Uint8 值。
                */
            _readUInt8(pos: number): number;
            /**
                * @internal
                * 从字节流的指定字节偏移量位置处读取一个 Uint16 值。
                * @param	pos	字节读取位置。
                * @return Uint16 值。
                */
            _getUint16(pos: number): number;
            /**
                * @internal
                * 从字节流的指定字节偏移量位置处读取一个 Uint16 值。
                * @param	pos	字节读取位置。
                * @return Uint16 值。
                */
            _readUint16(pos: number): number;
            /**
                * @internal
                * 使用 getFloat32() 读取6个值，用于创建并返回一个 Matrix 对象。
                * @return  Matrix 对象。
                */
            _getMatrix(): Phaser.GameObjects.Components.TransformMatrix;
            /**
                * @internal
                * 使用 getFloat32() 读取6个值，用于创建并返回一个 Matrix 对象。
                * @return  Matrix 对象。
                */
            _readMatrix(): Phaser.GameObjects.Components.TransformMatrix;
            /**
                * @private
                * 读取 <code>len</code> 参数指定的长度的字符串。
                * @param	len	要读取的字符串的长度。
                * @return 指定长度的字符串。
                */
            getCustomString(len: number): string;
            /**
                * @private
                * 读取 <code>len</code> 参数指定的长度的字符串。
                * @param	len	要读取的字符串的长度。
                * @return 指定长度的字符串。
                */
            readCustomString(len: number): string;
            /**
                * 移动或返回 Byte 对象的读写指针的当前位置（以字节为单位）。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
                */
            get pos(): number;
            set pos(value: number);
            /**
                * 可从字节流的当前位置到末尾读取的数据的字节数。
                */
            get bytesAvailable(): number;
            /**
                * 清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。
                */
            clear(): void;
            /**
                * @internal
                * 获取此对象的 ArrayBuffer 引用。
                * @return
                */
            __getBuffer(): ArrayBuffer;
            /**
                * <p>将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的字为字符串添加前缀。</p>
                * <p>对应的读取方法为： getUTFBytes 。</p>
                * @param value 要写入的字符串。
                */
            writeUTFBytes(value: string): void;
            /**
                * <p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>
                * <p>对应的读取方法为： getUTFString 。</p>
                * @param	value 要写入的字符串值。
                */
            writeUTFString(value: string): void;
            /**
                * <p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 32 位整数），然后写入表示字符串字符的字节。</p>
                * @param	value 要写入的字符串值。
                */
            writeUTFString32(value: string): void;
            /**
                * @private
                * 读取 UTF-8 字符串。
                * @return 读取的字符串。
                */
            readUTFString(): string;
            /**
                * @private
                */
            readUTFString32(): string;
            /**
                * <p>从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是一个无符号的短整型（以此字节表示要读取的长度）。</p>
                * <p>对应的写入方法为： writeUTFString 。</p>
                * @return 读取的字符串。
                */
            getUTFString(): string;
            /**
                * @private
                * 读字符串，必须是 writeUTFBytes 方法写入的字符串。
                * @param len	要读的buffer长度，默认将读取缓冲区全部数据。
                * @return 读取的字符串。
                */
            readUTFBytes(len?: number): string;
            /**
                * <p>从字节流中读取一个由 length 参数指定的长度的 UTF-8 字节序列，并返回一个字符串。</p>
                * <p>一般读取的是由 writeUTFBytes 方法写入的字符串。</p>
                * @param len	要读的buffer长度，默认将读取缓冲区全部数据。
                * @return 读取的字符串。
                */
            getUTFBytes(len?: number): string;
            /**
                * <p>在字节流中写入一个字节。</p>
                * <p>使用参数的低 8 位。忽略高 24 位。</p>
                * @param	value
                */
            writeByte(value: number): void;
            /**
                * <p>从字节流中读取带符号的字节。</p>
                * <p>返回值的范围是从 -128 到 127。</p>
                * @return 介于 -128 和 127 之间的整数。
                */
            readByte(): number;
            /**
                * @private
                * 从字节流中读取带符号的字节。
                */
            getByte(): number;
            /**
                * @internal
                * <p>保证该字节流的可用长度不小于 <code>lengthToEnsure</code> 参数指定的值。</p>
                * @param	lengthToEnsure	指定的长度。
                */
            _ensureWrite(lengthToEnsure: number): void;
            /**
                * <p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>
                * <p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>
                * <p>如果 offset 或 length 小于0，本函数将抛出异常。</p>
                * @param	arraybuffer	需要写入的 Arraybuffer 对象。
                * @param	offset		Arraybuffer 对象的索引的偏移量（以字节为单位）
                * @param	length		从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）
                */
            writeArrayBuffer(arraybuffer: any, offset?: number, length?: number): void;
            /**
                * 读取ArrayBuffer数据
                * @param	length
                * @return
                */
            readArrayBuffer(length: number): ArrayBuffer;
    }
}

declare module 'fairygui-phaser/utils/ChildHitArea' {
    import { HitArea } from 'fairygui-phaser/utils/HitArea';
    import { GObject } from 'fairygui-phaser/GObject';
    export class ChildHitArea extends HitArea {
        constructor(child: GObject, reversed?: boolean);
        contains(x: number, y: number): boolean;
    }
}

declare module 'fairygui-phaser/utils/ColorMatrix' {
    export class ColorMatrix {
        readonly matrix: Array<number>;
        constructor(p_brightness?: number, p_contrast?: number, p_saturation?: number, p_hue?: number);
        reset(): void;
        invert(): void;
        adjustColor(p_brightness: number, p_contrast: number, p_saturation: number, p_hue: number): void;
        adjustBrightness(p_val: number): void;
        adjustContrast(p_val: number): void;
        adjustSaturation(p_val: number): void;
        adjustHue(p_val: number): void;
        concat(p_matrix: Array<number>): void;
        clone(): ColorMatrix;
        protected copyMatrix(p_matrix: Array<number>): void;
        protected multiplyMatrix(p_matrix: Array<number>): void;
        protected cleanValue(p_val: number, p_limit: number): number;
    }
}

declare module 'fairygui-phaser/utils/DOMEventManager' {
    export class DOMEventManager extends Phaser.Events.EventEmitter {
        static inst: DOMEventManager;
        constructor();
        isKeyDown(key: number): boolean;
        isKeyPressed(key: number): boolean;
        isKeyReleased(key: number): boolean;
    }
}

declare module 'fairygui-phaser/utils/HitArea' {
    import { Graphics } from "fairygui-phaser/display/Graphics";
    /**
        * 鼠标点击区域，可以设置绘制一系列矢量图作为点击区域和非点击区域（目前只支持圆形，矩形，多边形）
        *
        */
    export class HitArea {
            /**
                * 检测对象是否包含指定的点。
                * @param	x	点的 X 轴坐标值（水平位置）。
                * @param	y	点的 Y 轴坐标值（垂直位置）。
                * @return	如果包含指定的点，则值为 true；否则为 false。
                */
            contains(x: number, y: number): boolean;
            /**
                * @internal
                * 是否击中Graphic
                */
            static _isHitGraphic(x: number, y: number, graphic: Graphics): boolean;
            /**
                * @internal
                * 是否击中绘图指令
                */
            static _isHitCmd(x: number, y: number, g: Graphics): boolean;
            /**
                * @internal
                * 坐标是否在多边形内
                */
            static _ptInPolygon(x: number, y: number, areaPoints: any[]): boolean;
            /**
                * 可点击区域，可以设置绘制一系列矢量图作为点击区域（目前只支持圆形，矩形，多边形）
                */
            get hit(): Graphics;
            set hit(value: Graphics);
            /**
                * 不可点击区域，可以设置绘制一系列矢量图作为非点击区域（目前只支持圆形，矩形，多边形）
                */
            get unHit(): Graphics;
            set unHit(value: Graphics);
    }
}

declare module 'fairygui-phaser/utils/ToolSet' {
    import { GObject } from 'fairygui-phaser/GObject';
    export class ToolSet {
        static startsWith(source: string, str: string, ignoreCase?: boolean): boolean;
        static endsWith(source: string, str: string, ignoreCase?: boolean): boolean;
        static trimRight(targetString: string): string;
        static convertToHtmlColor(argb: number, hasAlpha?: boolean): string;
        static convertFromHtmlColor(str: string, hasAlpha?: boolean): number;
        static displayObjectToGObject(obj: any): GObject;
        static encodeHTML(str: string): string;
        static clamp(value: number, min: number, max: number): number;
        static clamp01(value: number): number;
        static lerp(start: number, end: number, percent: number): number;
        static repeat(t: number, length: number): number;
        static distance(x1: number, y1: number, x2: number, y2: number): number;
        static setColorFilter(obj: any, color?: string | number[] | boolean): void;
    }
}

declare module 'fairygui-phaser/utils/UBBParser' {
    export class UBBParser {
        protected _handlers: {
            [index: string]: (tagName: string, end: boolean, attr: string) => string;
        };
        defaultImgWidth: number;
        defaultImgHeight: number;
        lastColor: string;
        lastSize: string;
        static inst: UBBParser;
        constructor();
        protected onTag_URL(tagName: string, end: boolean, attr: string): string;
        protected onTag_IMG(tagName: string, end: boolean, attr: string): string;
        protected onTag_B(tagName: string, end: boolean, attr: string): string;
        protected onTag_I(tagName: string, end: boolean, attr: string): string;
        protected onTag_U(tagName: string, end: boolean, attr: string): string;
        protected onTag_Simple(tagName: string, end: boolean, attr: string): string;
        protected onTag_COLOR(tagName: string, end: boolean, attr: string): string;
        protected onTag_FONT(tagName: string, end: boolean, attr: string): string;
        protected onTag_SIZE(tagName: string, end: boolean, attr: string): string;
        protected getTagText(remove?: boolean): string;
        parse(text: string, remove?: boolean): string;
    }
}

