import { TweenValue } from './TweenValue';
import { GPath } from './GPath';
export declare class GTweener {
    _target: any;
    _propType: any;
    _killed: boolean;
    _paused: boolean;
    private _delay;
    private _duration;
    private _breakpoint;
    private _easeType;
    private _easeOvershootOrAmplitude;
    private _easePeriod;
    private _repeat;
    private _yoyo;
    private _timeScale;
    private _snapping;
    private _userData;
    private _path;
    private _onUpdate;
    private _onStart;
    private _onComplete;
    private _onUpdateCaller;
    private _onStartCaller;
    private _onCompleteCaller;
    private _startValue;
    private _endValue;
    private _value;
    private _deltaValue;
    private _valueSize;
    private _started;
    private _ended;
    private _elapsedTime;
    private _normalizedTime;
    constructor();
    setDelay(value: number): GTweener;
    get delay(): number;
    setDuration(value: number): GTweener;
    get duration(): number;
    setBreakpoint(value: number): GTweener;
    setEase(value: number): GTweener;
    setEasePeriod(value: number): GTweener;
    setEaseOvershootOrAmplitude(value: number): GTweener;
    setRepeat(repeat: number, yoyo?: boolean): GTweener;
    get repeat(): number;
    setTimeScale(value: number): GTweener;
    setSnapping(value: boolean): GTweener;
    setTarget(value: any, propType?: any): GTweener;
    get target(): any;
    setPath(value: GPath): GTweener;
    setUserData(value: any): GTweener;
    get userData(): any;
    onUpdate(callback: Function, caller?: any): GTweener;
    onStart(callback: Function, caller?: any): GTweener;
    onComplete(callback: Function, caller?: any): GTweener;
    get startValue(): TweenValue;
    get endValue(): TweenValue;
    get value(): TweenValue;
    get deltaValue(): TweenValue;
    get normalizedTime(): number;
    get completed(): boolean;
    get allCompleted(): boolean;
    setPaused(paused: boolean): GTweener;
    /**
     * seek position of the tween, in seconds.
     */
    seek(time: number): void;
    kill(complete?: boolean): void;
    _to(start: number, end: number, duration: number): GTweener;
    _to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;
    _to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;
    _to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;
    _toColor(start: number, end: number, duration: number): GTweener;
    _shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;
    _init(): void;
    _reset(): void;
    _update(dt: number): void;
    private update;
    private callStartCallback;
    private callUpdateCallback;
    private callCompleteCallback;
}
